<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2.1 常见算法 on 算法学习笔记</title>
    <link>https://kingye.me/study-algs/docs/advanced/common/</link>
    <description>Recent content in 2.1 常见算法 on 算法学习笔记</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://kingye.me/study-algs/docs/advanced/common/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1.3.1 排序算法</title>
      <link>https://kingye.me/study-algs/docs/advanced/common/sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-algs/docs/advanced/common/sort/</guid>
      <description>&lt;h1 id=&#34;排序算法&#34;&gt;&#xA;  排序算法&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%8e%92%e5%ba%8f%e7%ae%97%e6%b3%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/ikingye/imagehost/picgo/20200424114357.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>LRU Cache</title>
      <link>https://kingye.me/study-algs/docs/advanced/common/lru/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-algs/docs/advanced/common/lru/</guid>
      <description>&lt;h1 id=&#34;lru-cache&#34;&gt;&#xA;  LRU Cache&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lru-cache&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;LRU 全称是 &lt;code&gt;Least Recently Used&lt;/code&gt;，即最近最久未使用的意思。&lt;/p&gt;&#xA;&lt;p&gt;LRU 算法的设计原则是：如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小。&#xA;也就是说，当限定的空间已存满数据时，应当把最久没有被访问到的数据淘汰。&lt;/p&gt;&#xA;&lt;h2 id=&#34;lru-k&#34;&gt;&#xA;  LRU-K&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lru-k&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;LRU-K 中的 K 代表最近使用的次数，因此 LRU 可以认为是 LRU-1。&lt;/p&gt;&#xA;&lt;p&gt;LRU-K 的主要目的是为了解决 LRU 算法 “缓存污染” 的问题，&#xA;其核心思想是将 “最近使用过 1 次” 的判断标准扩展为 “最近使用过 K 次”。&lt;/p&gt;&#xA;&lt;h2 id=&#34;redis-的-lru-实现&#34;&gt;&#xA;  Redis 的 LRU 实现&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#redis-%e7%9a%84-lru-%e5%ae%9e%e7%8e%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;如果按照 HashMap 和双向链表实现，需要额外的存储存放 next 和 prev 指针，牺牲比较大的存储空间，显然是不划算的。所以 Redis 采用了一个近似的做法，就是随机取出若干个 key，然后按照访问时间排序后，淘汰掉最不经常使用的，具体分析如下：&lt;/p&gt;&#xA;&lt;p&gt;为了支持 LRU，Redis 2.8.19 中使用了一个全局的 LRU 时钟，&lt;code&gt;server.lruclock&lt;/code&gt;，定义如下，&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#define REDIS_LRU_BITS 24&#xA;unsigned lruclock:REDIS_LRU_BITS; /* Clock for LRU eviction */&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认的 LRU 时钟的分辨率是 1 秒，可以通过改变  &lt;code&gt;REDIS_LRU_CLOCK_RESOLUTION&lt;/code&gt;  宏的值来改变，Redis 会在  &lt;code&gt;serverCron()&lt;/code&gt;  中调用  &lt;code&gt;updateLRUClock&lt;/code&gt;  定期的更新 LRU 时钟，更新的频率和 hz 参数有关，默认为  &lt;code&gt;100ms&lt;/code&gt;  一次，如下，&lt;/p&gt;</description>
    </item>
    <item>
      <title>paxos</title>
      <link>https://kingye.me/study-algs/docs/advanced/common/paxos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-algs/docs/advanced/common/paxos/</guid>
      <description>&lt;h1 id=&#34;paxos&#34;&gt;&#xA;  paxos&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#paxos&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>raft</title>
      <link>https://kingye.me/study-algs/docs/advanced/common/raft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-algs/docs/advanced/common/raft/</guid>
      <description>&lt;h1 id=&#34;raft&#34;&gt;&#xA;  raft&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#raft&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;</description>
    </item>
    <item>
      <title>树</title>
      <link>https://kingye.me/study-algs/docs/advanced/common/tree/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-algs/docs/advanced/common/tree/</guid>
      <description>&lt;h1 id=&#34;树&#34;&gt;&#xA;  树&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e6%a0%91&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;判断一棵树是否包含另一棵树的结构&#34;&gt;&#xA;  判断一棵树是否包含另一棵树的结构&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%88%a4%e6%96%ad%e4%b8%80%e6%a3%b5%e6%a0%91%e6%98%af%e5%90%a6%e5%8c%85%e5%90%ab%e5%8f%a6%e4%b8%80%e6%a3%b5%e6%a0%91%e7%9a%84%e7%bb%93%e6%9e%84&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;使用树结构序列化的方法，将两棵树进行相同方式的序列化，然后利用 &lt;strong&gt;kmp&lt;/strong&gt; 判断子串，则可以得到&lt;/p&gt;&#xA;&lt;p&gt;结果，时间复杂度为 O（m+n）&lt;/p&gt;&#xA;&lt;p&gt;这道题的可行性是：&lt;strong&gt;树结构的序列化和反序列化是一一对应的&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;hr&gt;</description>
    </item>
    <item>
      <title>KMP</title>
      <link>https://kingye.me/study-algs/docs/advanced/common/kmp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-algs/docs/advanced/common/kmp/</guid>
      <description>&lt;h1 id=&#34;kmp&#34;&gt;&#xA;  KMP&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#kmp&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;KMP 是用来找字符串匹配的&lt;/p&gt;&#xA;&lt;p&gt;KMP 的时间复杂度是 O (m + n)&lt;/p&gt;&#xA;&lt;h2 id=&#34;参考&#34;&gt;&#xA;  参考&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%8f%82%e8%80%83&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/21923021&#34;&gt;如何更好地理解和掌握 KMP 算法？&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/83334559&#34;&gt;KMP 算法详解&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.inf.hs-flensburg.de/lang/algorithmen/pattern/kmpen.htm&#34;&gt;Knuth-Morris-Pratt algorithm&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/112861530&#34;&gt;KMP：花 48 小时看懂了 KMP，想让你在 48 分钟内看懂&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>布隆过滤器</title>
      <link>https://kingye.me/study-algs/docs/advanced/common/bloom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://kingye.me/study-algs/docs/advanced/common/bloom/</guid>
      <description>&lt;h1 id=&#34;布隆过滤器httpswwwwikiwandcomzh-cne5b883e99a86e8bf87e6bba4e599a8&#34;&gt;&#xA;  &lt;a href=&#34;https://www.wikiwand.com/zh-cn/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8&#34;&gt;布隆过滤器&lt;/a&gt;&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%83%e9%9a%86%e8%bf%87%e6%bb%a4%e5%99%a8httpswwwwikiwandcomzh-cne5b883e99a86e8bf87e6bba4e599a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。&#xA;它实际上是一个&lt;strong&gt;很长的二进制向量&lt;/strong&gt;和&lt;strong&gt;一系列随机映射函数&lt;/strong&gt;。&#xA;布隆过滤器可以用于检索一个元素是否在一个集合中。&#xA;它的优点是&lt;strong&gt;空间效率&lt;/strong&gt;和&lt;strong&gt;查询时间&lt;/strong&gt;都比一般的算法要好的多，&#xA;缺点是有一定的&lt;strong&gt;误识别率&lt;/strong&gt;和&lt;strong&gt;删除困难&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;解决：&#xA;网页 URL 去重、垃圾邮件识别、大集合中重复元素的判断和缓存穿透等问题&lt;/p&gt;&#xA;&lt;p&gt;本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你&#xA;某样东西&lt;strong&gt;一定不存在&lt;/strong&gt;或者&lt;strong&gt;可能存在&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;hashmap-的问题&#34;&gt;&#xA;  HashMap 的问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#hashmap-%e7%9a%84%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;例如存储容量占比高，考虑到负载因子的存在，通常空间是不能被用满的，而一旦你的值很多例如上亿的时候，那 HashMap 占据的内存大小就变得很可观了。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;还比如说你的数据集存储在远程服务器上，本地服务接受输入，而数据集非常大不可能&lt;strong&gt;一次性读进内存&lt;/strong&gt;构建 HashMap 的时候，也会存在问题。&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;布隆过滤器的原理&#34;&gt;&#xA;  布隆过滤器的原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%b8%83%e9%9a%86%e8%bf%87%e6%bb%a4%e5%99%a8%e7%9a%84%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;当一个元素被加入集合时，通过 K 个&lt;a href=&#34;https://www.wikiwand.com/zh-cn/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0&#34;&gt;散列函数&lt;/a&gt;将这个元素映射成一个位&lt;a href=&#34;https://www.wikiwand.com/zh-cn/%E6%95%B0%E7%BB%84&#34; title=&#34;数组&#34;&gt;数组&lt;/a&gt;中的 K 个点，把它们置为 1。检索时，我们只要看看这些点是不是都是 1 就（大约）知道集合中有没有它了：如果这些点有任何一个 0，则被检元素一定不在；如果都是 1，则被检元素很可能在。&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;应用&#34;&gt;&#xA;  应用&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%ba%94%e7%94%a8&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;在大数据场景应用比较多，比如 Hbase 中使用它去判断数据是否在磁盘上。&lt;/p&gt;&#xA;&lt;p&gt;还有在爬虫场景判断 url 是否已经被爬取过。&lt;/p&gt;&#xA;&lt;h3 id=&#34;在缓存之前在加一层-bloomfilter&#34;&gt;&#xA;  在缓存之前在加一层 BloomFilter&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e5%9c%a8%e7%bc%93%e5%ad%98%e4%b9%8b%e5%89%8d%e5%9c%a8%e5%8a%a0%e4%b8%80%e5%b1%82-bloomfilter&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;</description>
    </item>
  </channel>
</rss>
