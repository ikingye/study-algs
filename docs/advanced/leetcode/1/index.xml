<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>101-200 on 算法学习笔记</title><link>https://kingye.me/study-algs/docs/advanced/leetcode/1/</link><description>Recent content in 101-200 on 算法学习笔记</description><generator>Hugo</generator><language>en</language><atom:link href="https://kingye.me/study-algs/docs/advanced/leetcode/1/index.xml" rel="self" type="application/rss+xml"/><item><title>110. 平衡二叉树</title><link>https://kingye.me/study-algs/docs/advanced/leetcode/1/110/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-algs/docs/advanced/leetcode/1/110/</guid><description>&lt;h1 id="平衡二叉树">
 平衡二叉树
 &lt;a class="anchor" href="#%e5%b9%b3%e8%a1%a1%e4%ba%8c%e5%8f%89%e6%a0%91">#&lt;/a>
&lt;/h1>
&lt;h2 id="题目httpsleetcode-cncomproblemsbalanced-binary-tree">
 &lt;a href="https://leetcode-cn.com/problems/balanced-binary-tree/">题目&lt;/a>
 &lt;a class="anchor" href="#%e9%a2%98%e7%9b%aehttpsleetcode-cncomproblemsbalanced-binary-tree">#&lt;/a>
&lt;/h2>
&lt;div class="book-tabs">


&lt;input type="radio" class="toggle" name="tabs-leetcode-problem" id="tabs-leetcode-problem-0" checked="checked" />
&lt;label for="tabs-leetcode-problem-0">中文&lt;/label>
&lt;div class="book-tabs-content markdown-inner">
给定一个二叉树，判断它是否是高度平衡的二叉树。

本题中，一棵高度平衡二叉树定义为：

一个二叉树每个节点   的左右两个子树的高度差的绝对值不超过 1。

示例 1:

```
给定二叉树 [3,9,20,null,null,15,7]

 3
 / \
 9 20
 / \
 15 7
```

返回 true 。

示例 2:

```
给定二叉树 [1,2,2,3,3,null,null,4,4]

 1
 / \
 2 2
 / \
 3 3
 / \
 4 4
返回 false 。
```

&lt;/div>



&lt;input type="radio" class="toggle" name="tabs-leetcode-problem" id="tabs-leetcode-problem-1" />
&lt;label for="tabs-leetcode-problem-1">English&lt;/label>
&lt;div class="book-tabs-content markdown-inner">
Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

Example 1:

```
Given the following tree [3,9,20,null,null,15,7]:

 3
 / \
 9 20
 / \
 15 7
```

Return true.

Example 2:

```
Given the following tree [1,2,2,3,3,null,null,4,4]:

 1
 / \
 2 2
 / \
 3 3
 / \
 4 4

Return false.
```

&lt;/div>


&lt;/div>

&lt;hr>
&lt;h2 id="分析">
 分析
 &lt;a class="anchor" href="#%e5%88%86%e6%9e%90">#&lt;/a>
&lt;/h2>
&lt;div class="book-tabs">


&lt;input type="radio" class="toggle" name="tabs-leetcode-analysis" id="tabs-leetcode-analysis-0" checked="checked" />
&lt;label for="tabs-leetcode-analysis-0">基础&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

&lt;/div>


&lt;input type="radio" class="toggle" name="tabs-leetcode-analysis" id="tabs-leetcode-analysis-1" />
&lt;label for="tabs-leetcode-analysis-1">进阶&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

&lt;/div>


&lt;input type="radio" class="toggle" name="tabs-leetcode-analysis" id="tabs-leetcode-analysis-2" />
&lt;label for="tabs-leetcode-analysis-2">高阶&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

&lt;/div>


&lt;/div>

&lt;hr>
&lt;h2 id="题解">
 题解
 &lt;a class="anchor" href="#%e9%a2%98%e8%a7%a3">#&lt;/a>
&lt;/h2>
&lt;div class="book-tabs">


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-0" checked="checked" />
&lt;label for="tabs-leetcode-solution-0">C&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```c

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-1" />
&lt;label for="tabs-leetcode-solution-1">C&amp;#43;&amp;#43;&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```c++

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-2" />
&lt;label for="tabs-leetcode-solution-2">C#&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```c#

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-3" />
&lt;label for="tabs-leetcode-solution-3">Go&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```go

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-4" />
&lt;label for="tabs-leetcode-solution-4">Java&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```java

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-5" />
&lt;label for="tabs-leetcode-solution-5">JavaScript&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```javascript
```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-6" />
&lt;label for="tabs-leetcode-solution-6">Kotlin&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```kotlin

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-7" />
&lt;label for="tabs-leetcode-solution-7">PHP&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```php

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-8" />
&lt;label for="tabs-leetcode-solution-8">Python2&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```python

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-9" />
&lt;label for="tabs-leetcode-solution-9">Python3&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```python
class Solution:
 def isBalanced(self, root: TreeNode) -> bool:
 return self.height(root) >= 0

 def height(self, root: TreeNode) -> int:
 if root is None:
 return 0
 lh = self.height(root.left)
 rh = self.height(root.right)
 if lh >= 0 and rh >=0 and abs(lh - rh) &lt;= 1:
 return max(lh, rh) + 1

 return -1
```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-10" />
&lt;label for="tabs-leetcode-solution-10">Ruby&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```ruby

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-11" />
&lt;label for="tabs-leetcode-solution-11">Rust&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```rust

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-12" />
&lt;label for="tabs-leetcode-solution-12">Scala&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```scala

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-13" />
&lt;label for="tabs-leetcode-solution-13">Swift&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```swift

```

&lt;/div>


---


&lt;/div></description></item><item><title>146. LRU 缓存机制</title><link>https://kingye.me/study-algs/docs/advanced/leetcode/1/146/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://kingye.me/study-algs/docs/advanced/leetcode/1/146/</guid><description>&lt;h1 id="lru-缓存机制">
 LRU 缓存机制
 &lt;a class="anchor" href="#lru-%e7%bc%93%e5%ad%98%e6%9c%ba%e5%88%b6">#&lt;/a>
&lt;/h1>
&lt;h2 id="题目httpsleetcode-cncomproblemslru-cache">
 &lt;a href="https://leetcode-cn.com/problems/lru-cache">题目&lt;/a>
 &lt;a class="anchor" href="#%e9%a2%98%e7%9b%aehttpsleetcode-cncomproblemslru-cache">#&lt;/a>
&lt;/h2>
&lt;div class="book-tabs">


&lt;input type="radio" class="toggle" name="tabs-leetcode-problem" id="tabs-leetcode-problem-0" checked="checked" />
&lt;label for="tabs-leetcode-problem-0">中文&lt;/label>
&lt;div class="book-tabs-content markdown-inner">
运用你所掌握的数据结构，设计和实现一个 [LRU (最近最少使用)](https://baike.baidu.com/item/LRU) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。

获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。
写入数据 put(key, value) - 如果密钥已经存在，则变更其数据值；如果密钥不存在，则插入该组「密钥 / 数据值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。

进阶:

你是否可以在  `O(1)` 时间复杂度内完成这两种操作？

示例:

```
LRUCache cache = new LRUCache( 2 /* 缓存容量 */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1); // 返回 1
cache.put(3, 3); // 该操作会使得密钥 2 作废
cache.get(2); // 返回 -1 (未找到)
cache.put(4, 4); // 该操作会使得密钥 1 作废
cache.get(1); // 返回 -1 (未找到)
cache.get(3); // 返回 3
cache.get(4); // 返回 4
```

&lt;/div>



&lt;input type="radio" class="toggle" name="tabs-leetcode-problem" id="tabs-leetcode-problem-1" />
&lt;label for="tabs-leetcode-problem-1">English&lt;/label>
&lt;div class="book-tabs-content markdown-inner">
Design and implement a data structure for [Least Recently Used (LRU)](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

The cache is initialized with a positive capacity.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

```
LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1); // returns 1
cache.put(3, 3); // evicts key 2
cache.get(2); // returns -1 (not found)
cache.put(4, 4); // evicts key 1
cache.get(1); // returns -1 (not found)
cache.get(3); // returns 3
cache.get(4); // returns 4

```

&lt;/div>


&lt;/div>

&lt;hr>
&lt;h2 id="分析">
 分析
 &lt;a class="anchor" href="#%e5%88%86%e6%9e%90">#&lt;/a>
&lt;/h2>
&lt;div class="book-tabs">


&lt;input type="radio" class="toggle" name="tabs-leetcode-analysis" id="tabs-leetcode-analysis-0" checked="checked" />
&lt;label for="tabs-leetcode-analysis-0">基础&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

&lt;/div>


&lt;input type="radio" class="toggle" name="tabs-leetcode-analysis" id="tabs-leetcode-analysis-1" />
&lt;label for="tabs-leetcode-analysis-1">进阶&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

&lt;/div>


&lt;input type="radio" class="toggle" name="tabs-leetcode-analysis" id="tabs-leetcode-analysis-2" />
&lt;label for="tabs-leetcode-analysis-2">高阶&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

&lt;/div>


&lt;/div>

&lt;hr>
&lt;h2 id="题解">
 题解
 &lt;a class="anchor" href="#%e9%a2%98%e8%a7%a3">#&lt;/a>
&lt;/h2>
&lt;div class="book-tabs">


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-0" checked="checked" />
&lt;label for="tabs-leetcode-solution-0">C&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```c

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-1" />
&lt;label for="tabs-leetcode-solution-1">C&amp;#43;&amp;#43;&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```c++

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-2" />
&lt;label for="tabs-leetcode-solution-2">C#&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```c#

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-3" />
&lt;label for="tabs-leetcode-solution-3">Go&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```go

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-4" />
&lt;label for="tabs-leetcode-solution-4">Java&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```java

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-5" />
&lt;label for="tabs-leetcode-solution-5">JavaScript&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```javascript
```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-6" />
&lt;label for="tabs-leetcode-solution-6">Kotlin&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```kotlin

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-7" />
&lt;label for="tabs-leetcode-solution-7">PHP&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```php

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-8" />
&lt;label for="tabs-leetcode-solution-8">Python2&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```python

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-9" />
&lt;label for="tabs-leetcode-solution-9">Python3&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```python
class DLinkedNode:
 def __init__(self):
 self.key = 0
 self.val = 0
 self.pre = None
 self.next = None

class LRUCache:

 def _add(self, node: DLinkedNode):
 node.next = self.head.next
 node.pre = self.head
 self.head.next.pre = node
 self.head.next = node

 def _remove(self, node: DLinkedNode):
 if not node or not node.pre or not node.next:
 return
 node.pre.next = node.next
 node.next.pre = node.pre

 def _move_to_head(self, node: DLinkedNode):
 self._remove(node)
 self._add(node)

 def _pop_tail(self) -> DLinkedNode:
 if self.size == 0:
 return None

 node = self.tail.pre
 self._remove(node)
 return node

 def __init__(self, capacity: int):
 self.capacity = capacity
 self.size = 0
 self.cache = {}
 self.head = DLinkedNode()
 self.tail = DLinkedNode()
 self.head.next = self.tail
 self.tail.pre = self.head


 def get(self, key: int) -> int:
 node = self.cache.get(key, None)
 if not node:
 return -1
 self._move_to_head(node)
 return node.val

 def put(self, key: int, value: int) -> None:
 node = self.cache.get(key, None)
 if not node:
 node = DLinkedNode()
 node.key = key
 node.val = value
 self.cache[key] = node
 self.size = self.size + 1
 self._add(node)

 if self.size > self.capacity:
 node = self._pop_tail()
 del(self.cache[node.key])
 else:
 node.val = value
 self._move_to_head(node)
```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-10" />
&lt;label for="tabs-leetcode-solution-10">Ruby&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```ruby

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-11" />
&lt;label for="tabs-leetcode-solution-11">Rust&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```rust

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-12" />
&lt;label for="tabs-leetcode-solution-12">Scala&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```scala

```

&lt;/div>


---


&lt;input type="radio" class="toggle" name="tabs-leetcode-solution" id="tabs-leetcode-solution-13" />
&lt;label for="tabs-leetcode-solution-13">Swift&lt;/label>
&lt;div class="book-tabs-content markdown-inner">

```swift

```

&lt;/div>


---


&lt;/div></description></item></channel></rss>