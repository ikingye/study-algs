'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/study-algs/docs/practice/leetcode/1/','title':"1. 两数之和",'content':"两数之和 题目 English  Given an array of integers, return indices of the two numbers such that they add up to a specific target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nExample:\nGiven nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].  中文  给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n示例:\n给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]    分析 基础  进阶  使用 hash 表，记录过程数据，空间换时间   题解 C  C\u0026#43;\u0026#43;  C#  Go  Java  class Solution { public int[] twoSum(int[] nums, int target) { HashMap \u0026lt;Integer, Integer\u0026gt; tmp = new HashMap\u0026lt;Integer, Integer\u0026gt;(); for(int i = 0; i \u0026lt; nums.length; i++) { if (tmp.get(nums[i]) != null) { return new int[] {tmp.get(nums[i]), i}; } else { tmp.put(target - nums[i], i); } } return new int[] {}; } }  JavaScript  Kotlin  PHP  Python2  Python3  class Solution(object): def twoSum(self, nums, target): \u0026#34;\u0026#34;\u0026#34;:type nums: List[int]:type target: int:rtype: List[int]\u0026#34;\u0026#34;\u0026#34; r = {} for i in range(len(nums)): if nums[i] in r: return i, r[nums[i]] else: r[target - nums[i]] = i  Ruby  Rust  Scala  Swift   "});index.add({'id':1,'href':'/study-algs/docs/basic/','title':"第一部分 基础",'content':""});index.add({'id':2,'href':'/study-algs/docs/practice/leetcode/2/','title':"2. 两数相加",'content':"两数相加 题目 English  中文    分析 基础  进阶  高阶    题解 C  C\u0026#43;\u0026#43;  C#  Go  Java  JavaScript  Kotlin  PHP  Python2  Python3  class Solution(object): def addTwoNumbers(self, l1, l2): \u0026#34;\u0026#34;\u0026#34;:type l1: ListNode:type l2: ListNode:rtype: ListNode\u0026#34;\u0026#34;\u0026#34; carry = 0 root = node = ListNode(0) while l1 or l2 or carry: v1 = v2 = 0 if l1: v1 = l1.val l1 = l1.next if l2: v2 = l2.val l2 = l2.next carry, val = divmod(v1 + v2 + carry, 10) node.next = ListNode(val) node = node.next return root.next  Ruby  Rust  Scala  Swift   "});index.add({'id':3,'href':'/study-algs/docs/advanced/','title':"第二部分 进阶",'content':""});index.add({'id':4,'href':'/study-algs/docs/practice/','title':"第三部分 练习",'content':""});index.add({'id':5,'href':'/study-algs/docs/practice/leetcode/','title':"Leetcode",'content':""});index.add({'id':6,'href':'/study-algs/docs/tutorial/','title':"教程",'content':"教程 基础 labuladong/fucking-algorithm 手把手撕 LeetCode 题目，扒各种算法套路的裤子，\nnot only how，but also why. English version supported!\nhttps://labuladong.gitbook.io/algo/\n 进阶 "});index.add({'id':7,'href':'/study-algs/docs/practice/yuanfudao/','title':"猿辅导",'content':""});index.add({'id':8,'href':'/study-algs/categories/','title':"Categories",'content':""});index.add({'id':9,'href':'/study-algs/docs/','title':"Docs",'content':""});index.add({'id':10,'href':'/study-algs/tags/','title':"Tags",'content':""});index.add({'id':11,'href':'/study-algs/','title':"首页",'content':""});})();