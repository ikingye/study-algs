'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/study-algs/docs/practice/leetcode/1/','title':"1. 两数之和",'content':"两数之和 题目 English  Given an array of integers, return indices of the two numbers such that they add up to a specific target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nExample:\nGiven nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].  中文  给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n示例:\n给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]    分析 基础  进阶  使用 hash 表，记录过程数据，空间换时间   题解 C  C\u0026#43;\u0026#43;  C#  Go  Java  class Solution { public int[] twoSum(int[] nums, int target) { HashMap \u0026lt;Integer, Integer\u0026gt; tmp = new HashMap\u0026lt;Integer, Integer\u0026gt;(); for(int i = 0; i \u0026lt; nums.length; i++) { if (tmp.get(nums[i]) != null) { return new int[] {tmp.get(nums[i]), i}; } else { tmp.put(target - nums[i], i); } } return new int[] {}; } }  JavaScript  Kotlin  PHP  Python2  Python3  class Solution(object): def twoSum(self, nums, target): \u0026#34;\u0026#34;\u0026#34;:type nums: List[int]:type target: int:rtype: List[int]\u0026#34;\u0026#34;\u0026#34; r = {} for i in range(len(nums)): if nums[i] in r: return i, r[nums[i]] else: r[target - nums[i]] = i  Ruby  Rust  Scala  Swift   "});index.add({'id':1,'href':'/study-algs/docs/basic/','title':"第一部分 基础",'content':""});index.add({'id':2,'href':'/study-algs/docs/practice/leetcode/2/','title':"2. 两数相加",'content':"两数相加 题目 English  You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\nExample:\nInput: (2 -\u0026gt; 4 -\u0026gt; 3) + (5 -\u0026gt; 6 -\u0026gt; 4) Output: 7 -\u0026gt; 0 -\u0026gt; 8 Explanation: 342 + 465 = 807.  中文  给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n示例：\n输入：(2 -\u0026gt; 4 -\u0026gt; 3) + (5 -\u0026gt; 6 -\u0026gt; 4) 输出：7 -\u0026gt; 0 -\u0026gt; 8 原因：342 + 465 = 807    分析 基础  进阶  高阶    题解 C  C\u0026#43;\u0026#43;  C#  Go  Java  JavaScript  Kotlin  PHP  Python2  Python3  class Solution(object): def addTwoNumbers(self, l1, l2): \u0026#34;\u0026#34;\u0026#34;:type l1: ListNode:type l2: ListNode:rtype: ListNode\u0026#34;\u0026#34;\u0026#34; carry = 0 root = node = ListNode(0) while l1 or l2 or carry: v1 = v2 = 0 if l1: v1 = l1.val l1 = l1.next if l2: v2 = l2.val l2 = l2.next carry, val = divmod(v1 + v2 + carry, 10) node.next = ListNode(val) node = node.next return root.next  Ruby  Rust  Scala  Swift   "});index.add({'id':3,'href':'/study-algs/docs/advanced/','title':"第二部分 进阶",'content':""});index.add({'id':4,'href':'/study-algs/docs/practice/leetcode/3/','title':"3. 无重复字符的最长子串",'content':"无重复字符的最长子串 题目 English  Given a string, find the length of the longest substring without repeating characters.\nExample 1:\nInput: \u0026quot;abcabcbb\u0026quot; Output: 3 Explanation: The answer is \u0026quot;abc\u0026quot;, with the length of 3. Example 2:\nInput: \u0026quot;bbbbb\u0026quot; Output: 1 Explanation: The answer is \u0026quot;b\u0026quot;, with the length of 1. Example 3:\nInput: \u0026quot;pwwkew\u0026quot; Output: 3 Explanation: The answer is \u0026quot;wke\u0026quot;, with the length of 3. Note that the answer must be a substring, \u0026quot;pwke\u0026quot; is a subsequence and not a substring.  中文  给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n示例 1:\n输入: \u0026quot;abcabcbb\u0026quot; 输出: 3 解释: 因为无重复字符的最长子串是 \u0026quot;abc\u0026quot;，所以其长度为 3。 示例 2:\n输入: \u0026quot;bbbbb\u0026quot; 输出: 1 解释: 因为无重复字符的最长子串是 \u0026quot;b\u0026quot;，所以其长度为 1。 示例 3:\n输入: \u0026quot;pwwkew\u0026quot; 输出: 3 解释: 因为无重复字符的最长子串是 \u0026quot;wke\u0026quot;，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，\u0026quot;pwke\u0026quot; 是一个子序列，不是子串。    分析 基础  进阶  高阶    题解 C  C\u0026#43;\u0026#43;  C#  Go  Java  JavaScript  Kotlin  PHP  Python2  class Solution(object): def addTwoNumbers(self, l1, l2): \u0026#34;\u0026#34;\u0026#34;:type l1: ListNode:type l2: ListNode:rtype: ListNode\u0026#34;\u0026#34;\u0026#34; carry = 0 root = node = ListNode(0) while l1 or l2 or carry: v1 = v2 = 0 if l1: v1 = l1.val l1 = l1.next if l2: v2 = l2.val l2 = l2.next carry, val = divmod(v1 + v2 + carry, 10) node.next = ListNode(val) node = node.next return root.next  Python3  class Solution: def lengthOfLongestSubstring(self, s: str) -\u0026gt; int: char_last_pos = {} start, ans = 0, 0 for i in range(len(s)): if s[i] in char_last_pos: start = max(start, char_last_pos[s[i]]) # 如果都没有重复字母，这里必须要 +1 ans = max(ans, i - start + 1) # 为了对应上面 +1，这里也 +1 char_last_pos[s[i]] = i + 1 return ans  Ruby  Rust  Scala  Swift   "});index.add({'id':5,'href':'/study-algs/docs/practice/','title':"第三部分 练习",'content':""});index.add({'id':6,'href':'/study-algs/docs/practice/leetcode/4/','title':"4. 寻找两个有序数组的中位数",'content':"寻找两个有序数组的中位数 题目 English  There are two sorted arrays nums1 and nums2 of size m and n respectively.\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\nYou may assume nums1 and nums2 cannot be both empty.\nExample 1:\nnums1 = [1, 3] nums2 = [2] The median is 2.0 Example 2:\nnums1 = [1, 2] nums2 = [3, 4] The median is (2 + 3)/2 = 2.5  中文  给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。\n请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O (log (m + n))。\n你可以假设 nums1 和 nums2 不会同时为空。\n示例 1:\nnums1 = [1, 3] nums2 = [2] 则中位数是 2.0 示例 2:\nnums1 = [1, 2] nums2 = [3, 4] 则中位数是 (2 + 3)/2 = 2.5    分析 基础  进阶  高阶    题解 C  C\u0026#43;\u0026#43;  C#  Go  Java  JavaScript  Kotlin  PHP  Python2  Python3  Ruby  Rust  Scala  Swift   "});index.add({'id':7,'href':'/study-algs/docs/practice/leetcode/7/','title':"7. 整数反转",'content':"整数反转 题目 English  Given a 32-bit signed integer, reverse digits of an integer.\nExample 1:\nInput: 123 Output: 321 Example 2:\nInput: -123 Output: -321 Example 3:\nInput: 120 Output: 21 Note: Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range:\n  \\( [-2^31, 2^31-1]. \\)  For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n中文  给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n示例 1:\n输入: 123 输出: 321 示例 2:\n输入: -123 输出: -321 示例 3:\n输入: 120 输出: 21 注意:\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为\n\\( [-2^31, 2^31-1]。 \\)  请根据这个假设，如果反转后整数溢出那么就返回 0。\n  分析 基础  进阶  高阶    题解 C  C\u0026#43;\u0026#43;  C#  Go  Java  JavaScript  Kotlin  PHP  Python2  Python3  python3 没有 cmp 函数， 使用 (a\u0026gt; b) - (a \u0026lt; b) 替代 （stackoverflow）\nclass Solution(object): def reverse(self, x): \u0026#34;\u0026#34;\u0026#34;:type x: int:rtype: int\u0026#34;\u0026#34;\u0026#34; s = (lambda a, b: (a \u0026gt; b) - (a \u0026lt; b))(x, 0) r = int(str(s * x)[::-1]) return s * r * (r \u0026lt; 2**31)  Ruby  Rust  Scala  Swift    参考  TeX wiki KaTeX/KaTeX   "});index.add({'id':8,'href':'/study-algs/docs/practice/leetcode/9/','title':"9. 回文数",'content':"回文数 题目 English  Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\nExample 1:\nInput: 121 Output: true Example 2:\nInput: -121 Output: false Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome. Example 3:\nInput: 10 Output: false Explanation: Reads 01 from right to left. Therefore it is not a palindrome. Follow up:\nCoud you solve it without converting the integer to a string?\n中文  判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n示例 1:\n输入: 121 输出: true 示例 2:\n输入: -121 输出: false 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。 示例 3:\n输入: 10 输出: false 解释: 从右向左读, 为 01 。因此它不是一个回文数。 进阶:\n你能不将整数转为字符串来解决这个问题吗？\n  分析 基础  进阶  高阶    题解 C  C\u0026#43;\u0026#43;  C#  Go  Java  JavaScript  Kotlin  PHP  Python2  Python3  不将整数转为字符串 TODO\n 将整数转为字符串 class Solution(object): def isPalindrome(self, x): \u0026#34;\u0026#34;\u0026#34;:type x: int:rtype: bool\u0026#34;\u0026#34;\u0026#34; if x \u0026lt; 0: return False return x == int(str(x)[::-1])  Ruby  Rust  Scala  Swift   "});index.add({'id':9,'href':'/study-algs/docs/practice/leetcode/','title':"Leetcode",'content':"Leetcode    题号 题目 标签 难度     1 两数之和 数组 , 哈希表 简单   2 两数相加 链表 , 数学 中等   3 无重复字符的最长子串 哈希表 , 双指针 , 字符串 中等    "});index.add({'id':10,'href':'/study-algs/docs/tutorial/','title':"教程",'content':"教程 基础 labuladong/fucking-algorithm 手把手撕 LeetCode 题目，扒各种算法套路的裤子，\nnot only how，but also why. English version supported!\nhttps://labuladong.gitbook.io/algo/\n 进阶 "});index.add({'id':11,'href':'/study-algs/docs/practice/yuanfudao/','title':"猿辅导",'content':""});index.add({'id':12,'href':'/study-algs/categories/','title':"Categories",'content':""});index.add({'id':13,'href':'/study-algs/docs/','title':"Docs",'content':""});index.add({'id':14,'href':'/study-algs/tags/','title':"Tags",'content':""});index.add({'id':15,'href':'/study-algs/','title':"首页",'content':""});})();