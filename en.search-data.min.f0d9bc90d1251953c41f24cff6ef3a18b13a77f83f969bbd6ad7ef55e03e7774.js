'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/study-algs/docs/practice/leetcode/1/','title':"1. 两数之和",'content':"两数之和 题目 中文 给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。\n你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n示例:\n给定 nums = [2, 7, 11, 15], target = 9 因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1] English Given an array of integers, return indices of the two numbers such that they add up to a specific target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nExample:\nGiven nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1].   分析 基础 进阶 使用 hash 表，记录过程数据，空间换时间  题解 C C\u0026#43;\u0026#43; C# Go func twoSum(nums []int, target int) []int { tmp := make(map[int]int) for k, v := range(nums) { first, ok := tmp[v] if ok { return []int{first, k} } tmp[target - v] = k } return []int{} } Java class Solution { public int[] twoSum(int[] nums, int target) { HashMap \u0026lt;Integer, Integer\u0026gt; tmp = new HashMap\u0026lt;Integer, Integer\u0026gt;(); for(int i = 0; i \u0026lt; nums.length; i++) { if (tmp.get(nums[i]) != null) { return new int[] {tmp.get(nums[i]), i}; } else { tmp.put(target - nums[i], i); } } return new int[] {}; } } JavaScript Kotlin PHP Python2 class Solution(object): def twoSum(self, nums, target): \u0026#34;\u0026#34;\u0026#34; :type nums: List[int] :type target: int :rtype: List[int] \u0026#34;\u0026#34;\u0026#34; r = {} for i in range(len(nums)): if nums[i] in r: return i, r[nums[i]] else: r[target - nums[i]] = i Python3 class Solution: def twoSum(self, nums: List[int], target: int) -\u0026gt; List[int]: Ruby Rust Scala Swift  "});index.add({'id':1,'href':'/study-algs/docs/basic/datastruct/','title':"数据结构",'content':"数据结构 常用的数据结构  数组（Array） 堆栈（Stack） 队列（Queue） 链表（Linked List） 树（Tree） 图（Graph） 堆积（Heap） 散列表（Hash table）   数据结构定义（源码） 链表 (Linked List) 单向链表 节点 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 # Definition for singly-linked list. class ListNode(object): def __init__(self, val): self.val = val self.next = None Python3 # Definition for singly-linked list. class ListNode: def __init__(self, val): self.val = val self.next = None Ruby Rust Scala Swift   双向链表 节点 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 # Definition for doubly-linked list. class ListNode(object): def __init__(self, val): self.val = val self.pre = None self.next = None Python3 # Definition for doubly-linked list. class ListNode: def __init__(self, val): self.val = val self.pre = None self.next = None Ruby Rust Scala Swift   树 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 # Definition for a binary tree node class TreeNode(object) { def __init__(self, val): self.val = val self.left = None self.right = None } Python3 # Definition for a binary tree node class TreeNode { def __init__(self, val): self.val = val self.left = None self.right = None } Ruby Rust Scala Swift   数据结构列表 \n类型  集合 容器  抽象类型  关联数组  多重关连数组（英语：Multimap）   列表 堆栈 队列  双端队列   优先队列  双端优先队列（英语：Double-ended priority queue）   集合  多重集 并查集    数组  字符串 位数组（英语：Bit array） 环形缓冲器 动态数组（英语：Dynamic array） 哈希表 哈希数组树（英语：Hashed array tree） 稀疏矩阵  链（英语：Linked data structure）  关联表（英语：Association list） 链表 跳跃列表 松散链表（英语：Unrolled linked list） 异或链表  树  线段树 自平衡二叉查找树 B 树 二叉树  AA 树 AVL 树 红黑树 平衡树 伸展树 二叉查找树   堆  二叉堆 左偏树 二项堆 斐波那契堆   R 树  R * 树 R + 树 Hilbert R 树（英语：Hilbert R-tree）   前缀树  哈希树    图  有向图 有向无环图 二元决策图 无向图 确定性非循环有限自动机  "});index.add({'id':2,'href':'/study-algs/docs/basic/','title':"第一部分 基础",'content':""});index.add({'id':3,'href':'/study-algs/docs/practice/leetcode/2/','title':"2. 两数相加",'content':"两数相加 题目 中文 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。\n如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。\n您可以假设除了数字 0 之外，这两个数都不会以 0 开头。\n示例：\n输入：(2 -\u0026gt; 4 -\u0026gt; 3) + (5 -\u0026gt; 6 -\u0026gt; 4) 输出：7 -\u0026gt; 0 -\u0026gt; 8 原因：342 + 465 = 807 English You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\nExample:\nInput: (2 -\u0026gt; 4 -\u0026gt; 3) + (5 -\u0026gt; 6 -\u0026gt; 4) Output: 7 -\u0026gt; 0 -\u0026gt; 8 Explanation: 342 + 465 = 807.   分析 基础 进阶 高阶   题解 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 class Solution(object): def addTwoNumbers(self, l1, l2): \u0026#34;\u0026#34;\u0026#34; :type l1: ListNode :type l2: ListNode :rtype: ListNode \u0026#34;\u0026#34;\u0026#34; carry = 0 root = node = ListNode(0) while l1 or l2 or carry: v1 = v2 = 0 if l1: v1 = l1.val l1 = l1.next if l2: v2 = l2.val l2 = l2.next carry, val = divmod(v1 + v2 + carry, 10) node.next = ListNode(val) node = node.next return root.next Python3 # Definition for singly-linked list. # class ListNode: # def __init__(self, x): # self.val = x # self.next = None class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -\u0026gt; ListNode: carry = 0 head = cur = ListNode(0) while l1 or l2: val1 = val2 = 0 if l1: val1 = l1.val l1 = l1.next if l2: val2 = l2.val l2 = l2.next tmp = val1 + val2 + carry carry = tmp // 10 cur.next = ListNode(tmp % 10) cur = cur.next if carry: cur.next = ListNode(carry) return head.next Ruby Rust Scala Swift  "});index.add({'id':4,'href':'/study-algs/docs/advanced/','title':"第二部分 进阶",'content':""});index.add({'id':5,'href':'/study-algs/docs/practice/leetcode/3/','title':"3. 无重复字符的最长子串",'content':"无重复字符的最长子串 题目 中文 给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。\n示例 1:\n输入: \u0026quot;abcabcbb\u0026quot; 输出: 3 解释: 因为无重复字符的最长子串是 \u0026quot;abc\u0026quot;，所以其长度为 3。 示例 2:\n输入: \u0026quot;bbbbb\u0026quot; 输出: 1 解释: 因为无重复字符的最长子串是 \u0026quot;b\u0026quot;，所以其长度为 1。 示例 3:\n输入: \u0026quot;pwwkew\u0026quot; 输出: 3 解释: 因为无重复字符的最长子串是 \u0026quot;wke\u0026quot;，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，\u0026quot;pwke\u0026quot; 是一个子序列，不是子串。 English Given a string, find the length of the longest substring without repeating characters.\nExample 1:\nInput: \u0026quot;abcabcbb\u0026quot; Output: 3 Explanation: The answer is \u0026quot;abc\u0026quot;, with the length of 3. Example 2:\nInput: \u0026quot;bbbbb\u0026quot; Output: 1 Explanation: The answer is \u0026quot;b\u0026quot;, with the length of 1. Example 3:\nInput: \u0026quot;pwwkew\u0026quot; Output: 3 Explanation: The answer is \u0026quot;wke\u0026quot;, with the length of 3. Note that the answer must be a substring, \u0026quot;pwke\u0026quot; is a subsequence and not a substring.   分析 基础 进阶 高阶   题解 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 class Solution(object): def addTwoNumbers(self, l1, l2): \u0026#34;\u0026#34;\u0026#34; :type l1: ListNode :type l2: ListNode :rtype: ListNode \u0026#34;\u0026#34;\u0026#34; carry = 0 root = node = ListNode(0) while l1 or l2 or carry: v1 = v2 = 0 if l1: v1 = l1.val l1 = l1.next if l2: v2 = l2.val l2 = l2.next carry, val = divmod(v1 + v2 + carry, 10) node.next = ListNode(val) node = node.next return root.next Python3 class Solution: def lengthOfLongestSubstring(self, s: str) -\u0026gt; int: char_last_pos = {} start, ans = 0, 0 for i in range(len(s)): if s[i] in char_last_pos: start = max(start, char_last_pos[s[i]]) # 如果都没有重复字母，这里必须要 +1 ans = max(ans, i - start + 1) # 为了对应上面 +1，这里也 +1 char_last_pos[s[i]] = i + 1 return ans Ruby Rust Scala Swift  "});index.add({'id':6,'href':'/study-algs/docs/practice/','title':"第三部分 练习",'content':""});index.add({'id':7,'href':'/study-algs/docs/practice/leetcode/4/','title':"4. 寻找两个有序数组的中位数",'content':"寻找两个有序数组的中位数 题目 中文 给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。\n请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O (log (m + n))。\n你可以假设 nums1 和 nums2 不会同时为空。\n示例 1:\nnums1 = [1, 3] nums2 = [2] 则中位数是 2.0 示例 2:\nnums1 = [1, 2] nums2 = [3, 4] 则中位数是 (2 + 3)/2 = 2.5 English There are two sorted arrays nums1 and nums2 of size m and n respectively.\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\nYou may assume nums1 and nums2 cannot be both empty.\nExample 1:\nnums1 = [1, 3] nums2 = [2] The median is 2.0 Example 2:\nnums1 = [1, 2] nums2 = [3, 4] The median is (2 + 3)/2 = 2.5   分析 基础 进阶 高阶   题解 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift  "});index.add({'id':8,'href':'/study-algs/docs/practice/leetcode/7/','title':"7. 整数反转",'content':"整数反转 题目 中文 给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。\n示例 1:\n输入: 123 输出: 321 示例 2:\n输入: -123 输出: -321 示例 3:\n输入: 120 输出: 21 注意:\n假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为\n  \\( [-2^31, 2^31-1]。 \\)  请根据这个假设，如果反转后整数溢出那么就返回 0。\nEnglish Given a 32-bit signed integer, reverse digits of an integer.\nExample 1:\nInput: 123 Output: 321 Example 2:\nInput: -123 Output: -321 Example 3:\nInput: 120 Output: 21 Note: Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range:\n\\( [-2^31, 2^31-1]. \\)  For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.\n  分析 基础 进阶 高阶   题解 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 高阶 class Solution(object): def reverse(self, x): \u0026#34;\u0026#34;\u0026#34; :type x: int :rtype: int \u0026#34;\u0026#34;\u0026#34; # 符合 s = cmp(x, 0) r = int(str(s * x)[::-1]) return s * r * (r \u0026lt; 2**31) Python3 高阶 python3 没有 cmp 函数， 使用 (a \u0026gt; b) - (a \u0026lt; b) 替代\n参考：\n stackoverflow  class Solution: def reverse(self, x: int) -\u0026gt; int: s = (lambda a, b: (a \u0026gt; b) - (a \u0026lt; b))(x, 0) r = int(str(s * x)[::-1]) return s * r * (r \u0026lt; 2**31) Ruby Rust Scala Swift   参考  TeX wiki KaTeX/KaTeX   "});index.add({'id':9,'href':'/study-algs/docs/practice/leetcode/9/','title':"9. 回文数",'content':"回文数 题目 中文 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。\n示例 1:\n输入: 121 输出: true 示例 2:\n输入: -121 输出: false 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。 示例 3:\n输入: 10 输出: false 解释: 从右向左读, 为 01 。因此它不是一个回文数。 进阶:\n你能不将整数转为字符串来解决这个问题吗？\nEnglish Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.\nExample 1:\nInput: 121 Output: true Example 2:\nInput: -121 Output: false Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome. Example 3:\nInput: 10 Output: false Explanation: Reads 01 from right to left. Therefore it is not a palindrome. Follow up:\nCoud you solve it without converting the integer to a string?\n  分析 基础 进阶 高阶   题解 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 class Solution(object): def isPalindrome(self, x): \u0026#34;\u0026#34;\u0026#34; :type x: int :rtype: bool \u0026#34;\u0026#34;\u0026#34; if x \u0026lt; 0: return False return x == int(str(x)[::-1]) Python3 不将整数转为字符串 TODO\n 将整数转为字符串 class Solution: def isPalindrome(self, x: int) -\u0026gt; bool: if x \u0026lt; 0: return False return x == int(str(x)[::-1]) Ruby Rust Scala Swift  "});index.add({'id':10,'href':'/study-algs/docs/practice/leetcode/10/','title':"10. 正则表达式匹配",'content':"正则表达式匹配 题目 中文 给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 \u0026lsquo;.\u0026rsquo; 和 \u0026lsquo;*\u0026rsquo; 的正则表达式匹配。\n\u0026lsquo;.\u0026rsquo; 匹配任意单个字符 \u0026lsquo;*\u0026rsquo; 匹配零个或多个前面的那一个元素 所谓匹配，是要涵盖 整个 字符串 s 的，而不是部分字符串。\n说明:\ns 可能为空，且只包含从 a-z 的小写字母。 p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。 示例 1:\n输入: s = \u0026quot;aa\u0026quot; p = \u0026quot;a\u0026quot; 输出: false 解释: \u0026quot;a\u0026quot; 无法匹配 \u0026quot;aa\u0026quot; 整个字符串。 示例 2:\n输入: s = \u0026quot;aa\u0026quot; p = \u0026quot;a*\u0026quot; 输出: true 解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 \u0026quot;aa\u0026quot; 可被视为 'a' 重复了一次。 示例 3:\n输入: s = \u0026quot;ab\u0026quot; p = \u0026quot;.*\u0026quot; 输出: true 解释: \u0026quot;.*\u0026quot; 表示可匹配零个或多个（'*'）任意字符（'.'）。 示例 4:\n输入: s = \u0026quot;aab\u0026quot; p = \u0026quot;c*a*b\u0026quot; 输出: true 解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 \u0026quot;aab\u0026quot;。 示例 5:\n输入: s = \u0026quot;mississippi\u0026quot; p = \u0026quot;mis*is*p*.\u0026quot; 输出: false English Given an input string (s) and a pattern (p), implement regular expression matching with support for \u0026lsquo;.\u0026rsquo; and \u0026lsquo;*'.\n\u0026lsquo;.\u0026rsquo; Matches any single character. \u0026lsquo;*\u0026rsquo; Matches zero or more of the preceding element. The matching should cover the entire input string (not partial).\nNote:\ns could be empty and contains only lowercase letters a-z. p could be empty and contains only lowercase letters a-z, and characters like . or *. Example 1:\nInput: s = \u0026quot;aa\u0026quot; p = \u0026quot;a\u0026quot; Output: false Explanation: \u0026quot;a\u0026quot; does not match the entire string \u0026quot;aa\u0026quot;. Example 2:\nInput: s = \u0026quot;aa\u0026quot; p = \u0026quot;a*\u0026quot; Output: true Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \u0026quot;aa\u0026quot;. Example 3:\nInput: s = \u0026quot;ab\u0026quot; p = \u0026quot;.*\u0026quot; Output: true Explanation: \u0026quot;.*\u0026quot; means \u0026quot;zero or more (*) of any character (.)\u0026quot;. Example 4:\nInput: s = \u0026quot;aab\u0026quot; p = \u0026quot;c*a*b\u0026quot; Output: true Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches \u0026quot;aab\u0026quot;. Example 5:\nInput: s = \u0026quot;mississippi\u0026quot; p = \u0026quot;mis*is*p*.\u0026quot; Output: false   分析 基础 进阶 高阶   题解 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 Ruby Rust Scala Swift  "});index.add({'id':11,'href':'/study-algs/docs/practice/design/lru/','title':"LRU Cache",'content':"LRU Cache LRU 全称是 Least Recently Used，即最近最久未使用的意思。\nLRU 算法的设计原则是：如果一个数据在最近一段时间没有被访问到，那么在将来它被访问的可能性也很小。 也就是说，当限定的空间已存满数据时，应当把最久没有被访问到的数据淘汰。\nLRU-K LRU-K 中的 K 代表最近使用的次数，因此 LRU 可以认为是 LRU-1。\nLRU-K 的主要目的是为了解决 LRU 算法 “缓存污染” 的问题， 其核心思想是将 “最近使用过 1 次” 的判断标准扩展为 “最近使用过 K 次”。\nRedis 的 LRU 实现 如果按照 HashMap 和双向链表实现，需要额外的存储存放 next 和 prev 指针，牺牲比较大的存储空间，显然是不划算的。所以 Redis 采用了一个近似的做法，就是随机取出若干个 key，然后按照访问时间排序后，淘汰掉最不经常使用的，具体分析如下：\n为了支持 LRU，Redis 2.8.19 中使用了一个全局的 LRU 时钟，server.lruclock，定义如下，\n#define REDIS_LRU_BITS 24 unsigned lruclock:REDIS_LRU_BITS; /* Clock for LRU eviction */ 默认的 LRU 时钟的分辨率是 1 秒，可以通过改变 REDIS_LRU_CLOCK_RESOLUTION 宏的值来改变，Redis 会在 serverCron() 中调用 updateLRUClock 定期的更新 LRU 时钟，更新的频率和 hz 参数有关，默认为 100ms 一次，如下，\n#define REDIS_LRU_CLOCK_MAX ((1\u0026lt;\u0026lt;REDIS_LRU_BITS)-1) /* Max value of obj-\u0026gt;lru */ #define REDIS_LRU_CLOCK_RESOLUTION 1 /* LRU clock resolution in seconds */ void updateLRUClock(void) { server.lruclock = (server.unixtime / REDIS_LRU_CLOCK_RESOLUTION) \u0026amp; REDIS_LRU_CLOCK_MAX; } server.unixtime 是系统当前的 unix 时间戳，当 lruclock 的值超出 REDIS_LRU_CLOCK_MAX 时，会从头开始计算，所以在计算一个 key 的最长没有访问时间时，可能 key 本身保存的 lru 访问时间会比当前的 lrulock 还要大，这个时候需要计算额外时间，如下，\n/* Given an object returns the min number of seconds the object was never * requested, using an approximated LRU algorithm. */ unsigned long estimateObjectIdleTime(robj *o) { if (server.lruclock \u0026gt;= o-\u0026gt;lru) { return (server.lruclock - o-\u0026gt;lru) * REDIS_LRU_CLOCK_RESOLUTION; } else { return ((REDIS_LRU_CLOCK_MAX - o-\u0026gt;lru) + server.lruclock) * REDIS_LRU_CLOCK_RESOLUTION; } } Redis 支持和 LRU 相关淘汰策略包括，\n volatile-lru 设置了过期时间的 key 参与近似的 lru 淘汰策略 allkeys-lru 所有的 key 均参与近似的 lru 淘汰策略  当进行 LRU 淘汰时，Redis 按如下方式进行的，\n...... /* volatile-lru and allkeys-lru policy */ else if (server.maxmemory_policy == REDIS_MAXMEMORY_ALLKEYS_LRU || server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_LRU) { for (k = 0; k \u0026lt; server.maxmemory_samples; k++) { sds thiskey; long thisval; robj *o; de = dictGetRandomKey(dict); thiskey = dictGetKey(de); /* When policy is volatile-lru we need an additional lookup * to locate the real key, as dict is set to db-\u0026gt;expires. */ if (server.maxmemory_policy == REDIS_MAXMEMORY_VOLATILE_LRU) de = dictFind(db-\u0026gt;dict, thiskey); o = dictGetVal(de); thisval = estimateObjectIdleTime(o); /* Higher idle time is better candidate for deletion */ if (bestkey == NULL || thisval \u0026gt; bestval) { bestkey = thiskey; bestval = thisval; } } } ...... Redis 会基于 server.maxmemory_samples 配置选取固定数目的 key，然后比较它们的 lru 访问时间，然后淘汰最近最久没有访问的 key，maxmemory_samples 的值越大，Redis 的近似 LRU 算法就越接近于严格 LRU 算法，但是相应消耗也变高，对性能有一定影响，样本值默认为 5。\n总结\n看来，虽然一个简单的概念，在工业界的产品中，为了追求空间的利用率，也会采用权衡的实现方案。\n参考  LeetCode: LRU 缓存机制 LRU 原理和 Redis 实现 —— 一个今日头条的面试题  "});index.add({'id':12,'href':'/study-algs/docs/practice/common/','title':"常见算法题",'content':"常见算法题 树 判断一棵树是否包含另一棵树的结构 使用树结构序列化的方法，将两棵树进行相同方式的序列化，然后利用 kmp 判断子串，则可以得到\n结果，时间复杂度为 O（m+n）\n这道题的可行性是：树结构的序列化和反序列化是一一对应的\n "});index.add({'id':13,'href':'/study-algs/docs/tutorial/','title':"教程",'content':"教程 基础 labuladong/fucking-algorithm  手把手撕 LeetCode 题目，扒各种算法套路的裤子， not only how，but also why. English version supported! https://labuladong.gitbook.io/algo/\ndonnemartin/interactive-coding-challenges  120+ interactive Python coding interview challenges (algorithms and data structures). Includes Anki flashcards.\n 进阶 "});index.add({'id':14,'href':'/study-algs/docs/practice/design/','title':"算法设计",'content':"算法设计 "});index.add({'id':15,'href':'/study-algs/docs/basic/type/','title':"类型",'content':"算法类型 基本算法 递归  迭代  贪心 / 贪婪  动态规划  分治 分治算法是递归的典型应用\n 回溯法 backtracking 回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就 “回溯” 返回，尝试别的路径。\n回溯法简单来说就是按照深度优先的顺序，穷举所有可能性的算法， 但是回溯算法比暴力穷举法更高明的地方就是回溯算法可以随时判断当前状态是否符合问题的条件。 一旦不符合条件，那么就退回到上一个状态，省去了继续往下探索的时间。\n 分支限界法 分支限界法是广度优先的一个经典例子\n 其他 背包 "});index.add({'id':16,'href':'/study-algs/docs/advanced/kmp/','title':"KMP",'content':"KMP KMP 是用来找字符串匹配的\nKMP 的时间复杂度是 O (m + n)\n参考  如何更好地理解和掌握 KMP 算法？ KMP 算法详解 Knuth-Morris-Pratt algorithm  KMP：花 48 小时看懂了 KMP，想让你在 48 分钟内看懂    "});index.add({'id':17,'href':'/study-algs/docs/practice/leetcode/','title':"LeetCode",'content':"LeetCode    题号 题目（点击查看题解） 标签 难度     1 两数之和 数组 , 哈希表 简单   2 两数相加 链表 , 数学 中等   3 无重复字符的最长子串 哈希表 , 双指针 , 字符串 中等   4 寻找两个有序数组的中位数 数组 , 二分查找 , 分治算法 困难   5 最长回文子串 字符串 , 动态规划 中等   6 Z 字形变换 字符串 中等   7 整数反转 数学 简单   8 字符串转换整数 (atoi) 数学 , 字符串 中等   9 回文数 数学 简单   10 正则表达式匹配 字符串 , 动态规划 , 回溯算法 困难   11 盛最多水的容器 数组 , 双指针 中等   12 整数转罗马数字 数学 , 字符串 中等   13 罗马数字转整数 数学 , 字符串 简单   14 最长公共前缀 字符串 简单   15 三数之和 数组 , 双指针 中等   16 最接近的三数之和 数组 , 双指针 中等   17 电话号码的字母组合 字符串 , 回溯算法 中等   18 四数之和 数组 , 哈希表 , 双指针 中等   19 删除链表的倒数第 N 个节点 链表 , 双指针 中等   20 有效的括号 栈 , 字符串 简单   21 合并两个有序链表 链表 简单   22 括号生成 字符串 , 回溯算法 中等   23 合并 K 个排序链表 堆 , 链表 , 分治算法 困难   24 两两交换链表中的节点 链表 中等   25 K 个一组翻转链表 链表 困难   26 删除排序数组中的重复项 数组 , 双指针 简单   27 移除元素 数组 , 双指针 简单   28 实现 strStr () 双指针 , 字符串 简单   29 两数相除 数学 , 二分查找 中等   30 串联所有单词的子串 哈希表 , 双指针 , 字符串 困难   31 下一个排列 数组 中等   32 最长有效括号 字符串 , 动态规划 困难   33 搜索旋转排序数组 数组 , 二分查找 中等   34 在排序数组中查找元素的第一个和最后一个位置 数组 , 二分查找 中等   35 搜索插入位置 数组 , 二分查找 简单   36 有效的数独 哈希表 中等   37 解数独 哈希表 , 回溯算法 困难   38 外观数列 字符串 简单   39 组合总和 数组 , 回溯算法 中等   40 组合总和 II 数组 , 回溯算法 中等   41 缺失的第一个正数 数组 困难   42 接雨水 栈 , 数组 , 双指针 困难   43 字符串相乘 数学 , 字符串 中等   44 通配符匹配 贪心算法 , 字符串 , 动态规划 , 回溯算法 困难   45 跳跃游戏 II 贪心算法 , 数组 困难   46 全排列 回溯算法 中等   47 全排列 II 回溯算法 中等   48 旋转图像 数组 中等   49 字母异位词分组 哈希表 , 字符串 中等   50 Pow(x, n) 数学 , 二分查找 中等   51 N 皇后 回溯算法 困难   52 N 皇后 II 回溯算法 困难   53 最大子序和 数组 , 分治算法 , 动态规划 简单   54 螺旋矩阵 数组 中等   55 跳跃游戏 贪心算法 , 数组 中等   56 合并区间 排序 , 数组 中等   57 插入区间 排序 , 数组 困难   58 最后一个单词的长度 字符串 简单   59 螺旋矩阵 II 数组 中等   60 第 k 个排列 数学 , 回溯算法 中等   61 旋转链表 链表 , 双指针 中等   62 不同路径 数组 , 动态规划 中等   63 不同路径 II 数组 , 动态规划 中等   64 最小路径和 数组 , 动态规划 中等   65 有效数字 数学 , 字符串 困难   66 加一 数组 简单   67 二进制求和 数学 , 字符串 简单   68 文本左右对齐 字符串 困难   69 x 的平方根 数学 , 二分查找 简单   70 爬楼梯 动态规划 简单   71 简化路径 栈 , 字符串 中等   72 编辑距离 字符串 , 动态规划 困难   73 矩阵置零 数组 中等   74 搜索二维矩阵 数组 , 二分查找 中等   75 颜色分类 排序 , 数组 , 双指针 中等   76 最小覆盖子串 哈希表 , 双指针 , 字符串 困难   77 组合 回溯算法 中等   78 子集 位运算 , 数组 , 回溯算法 中等   79 单词搜索 数组 , 回溯算法 中等   80 删除排序数组中的重复项 II 数组 , 双指针 中等   81 搜索旋转排序数组 II 数组 , 二分查找 中等   82 删除排序链表中的重复元素 II 链表 中等   83 删除排序链表中的重复元素 链表 简单   84 柱状图中最大的矩形 栈 , 数组 困难   85 最大矩形 栈 , 数组 , 哈希表 , 动态规划 困难   86 分隔链表 链表 , 双指针 中等   87 扰乱字符串 字符串 , 动态规划 困难   88 合并两个有序数组 数组 , 双指针 简单   89 格雷编码 回溯算法 中等   90 子集 II 数组 , 回溯算法 中等   91 解码方法 字符串 , 动态规划 中等   92 反转链表 II 链表 中等   93 复原 IP 地址 字符串 , 回溯算法 中等   94 二叉树的中序遍历 栈 , 树 , 哈希表 中等   95 不同的二叉搜索树 II 树 , 动态规划 中等   96 不同的二叉搜索树 树 , 动态规划 中等   97 交错字符串 字符串 , 动态规划 困难   98 验证二叉搜索树 树 , 深度优先搜索 中等   99 恢复二叉搜索树 树 , 深度优先搜索 困难   100 相同的树 树 , 深度优先搜索 简单   101 对称二叉树 树 , 深度优先搜索 , 广度优先搜索 简单   102 二叉树的层次遍历 树 , 广度优先搜索 中等   103 二叉树的锯齿形层次遍历 栈 , 树 , 广度优先搜索 中等   104 二叉树的最大深度 树 , 深度优先搜索 简单   105 从前序与中序遍历序列构造二叉树 树 , 深度优先搜索 , 数组 中等   106 从中序与后序遍历序列构造二叉树 树 , 深度优先搜索 , 数组 中等   107 二叉树的层次遍历 II 树 , 广度优先搜索 简单   108 将有序数组转换为二叉搜索树 树 , 深度优先搜索 简单   109 有序链表转换二叉搜索树 深度优先搜索 , 链表 中等   110 平衡二叉树 树 , 深度优先搜索 简单   111 二叉树的最小深度 树 , 深度优先搜索 , 广度优先搜索 简单   112 路径总和 树 , 深度优先搜索 简单   113 路径总和 II 树 , 深度优先搜索 中等   114 二叉树展开为链表 树 , 深度优先搜索 中等   115 不同的子序列 字符串 , 动态规划 困难   116 填充每个节点的下一个右侧节点指针 树 , 深度优先搜索 中等   117 填充每个节点的下一个右侧节点指针 II 树 , 深度优先搜索 中等   118 杨辉三角 数组 简单   119 杨辉三角 II 数组 简单   120 三角形最小路径和 数组 , 动态规划 中等   121 买卖股票的最佳时机 数组 , 动态规划 简单   122 买卖股票的最佳时机 II 贪心算法 , 数组 简单   123 买卖股票的最佳时机 III 数组 , 动态规划 困难   124 二叉树中的最大路径和 树 , 深度优先搜索 困难   125 验证回文串 双指针 , 字符串 简单   126 单词接龙 II 广度优先搜索 , 数组 , 字符串 , 回溯算法 困难   127 单词接龙 广度优先搜索 中等   128 最长连续序列 并查集 , 数组 困难   129 求根到叶子节点数字之和 树 , 深度优先搜索 中等   130 被围绕的区域 深度优先搜索 , 广度优先搜索 , 并查集 中等   131 分割回文串 回溯算法 中等   132 分割回文串 II 动态规划 困难   133 克隆图 深度优先搜索 , 广度优先搜索 , 图 中等   134 加油站 贪心算法 中等   135 分发糖果 贪心算法 困难   136 只出现一次的数字 位运算 , 哈希表 简单   137 只出现一次的数字 II 位运算 中等   138 复制带随机指针的链表 哈希表 , 链表 中等   139 单词拆分 动态规划 中等   140 单词拆分 II 动态规划 , 回溯算法 困难   141 环形链表 链表 , 双指针 简单   142 环形链表 II 链表 , 双指针 中等   143 重排链表 链表 中等   144 二叉树的前序遍历 栈 , 树 中等   145 二叉树的后序遍历 栈 , 树 困难   146 LRU 缓存机制 设计 中等   147 对链表进行插入排序 排序 , 链表 中等   148 排序链表 排序 , 链表 中等   149 直线上最多的点数 哈希表 , 数学 困难   150 逆波兰表达式求值 栈 中等   151 翻转字符串里的单词 字符串 中等   152 乘积最大子数组 数组 , 动态规划 中等   153 寻找旋转排序数组中的最小值 数组 , 二分查找 中等   154 寻找旋转排序数组中的最小值 II 数组 , 二分查找 困难   155 最小栈 栈 , 设计 简单   156 上下翻转二叉树 树 中等   157 用 Read4 读取 N 个字符 字符串 简单   158 用 Read4 读取 N 个字符 II 字符串 困难   159 至多包含两个不同字符的最长子串 哈希表 , 双指针 , 字符串 中等   160 相交链表 链表 简单   161 相隔为 1 的编辑距离 字符串 中等   162 寻找峰值 数组 , 二分查找 中等   163 缺失的区间 数组 中等   164 最大间距 排序 困难   165 比较版本号 字符串 中等   166 分数到小数 哈希表 , 数学 中等   167 两数之和 II - 输入有序数组 数组 , 双指针 , 二分查找 简单   168 Excel 表列名称 数学 简单   169 多数元素 位运算 , 数组 , 分治算法 简单   170 两数之和 III - 数据结构设计 设计 , 哈希表 简单   171 Excel 表列序号 数学 简单   172 阶乘后的零 数学 简单   173 二叉搜索树迭代器 栈 , 树 , 设计 中等   174 地下城游戏 二分查找 , 动态规划 困难   175 组合两个表 数据库 简单   176 第二高的薪水 数据库 简单   177 第 N 高的薪水 数据库 中等   178 分数排名 数据库 中等   179 最大数 排序 中等   180 连续出现的数字 数据库 中等   181 超过经理收入的员工 数据库 简单   182 查找重复的电子邮箱 数据库 简单   183 从不订购的客户 数据库 简单   184 部门工资最高的员工 数据库 中等   185 部门工资前三高的所有员工 数据库 困难   186 翻转字符串里的单词 II 字符串 中等   187 重复的 DNA 序列 位运算 , 哈希表 中等   188 买卖股票的最佳时机 IV 动态规划 困难   189 旋转数组 数组 简单   190 颠倒二进制位 位运算 简单   191 位 1 的个数 位运算 简单   192 统计词频 Shell 中等   193 有效电话号码 Shell 简单   194 转置文件 Shell 中等   195 第十行 Shell 简单   196 删除重复的电子邮箱 数据库 简单   197 上升的温度 数据库 简单   198 打家劫舍 动态规划 简单   199 二叉树的右视图 树 , 深度优先搜索 , 广度优先搜索 中等   200 岛屿数量 深度优先搜索 , 广度优先搜索 , 并查集 中等   201 数字范围按位与 位运算 中等   202 快乐数 哈希表 , 数学 简单   203 移除链表元素 链表 简单   204 计数质数 哈希表 , 数学 简单   205 同构字符串 哈希表 简单   206 反转链表 链表 简单   207 课程表 深度优先搜索 , 广度优先搜索 , 图 , 拓扑排序 中等   208 实现 Trie (前缀树) 设计 , 字典树 中等   209 长度最小的子数组 数组 , 双指针 , 二分查找 中等   210 课程表 II 深度优先搜索 , 广度优先搜索 , 图 , 拓扑排序 中等   211 添加与搜索单词 - 数据结构设计 设计 , 字典树 , 回溯算法 中等   212 单词搜索 II 字典树 , 回溯算法 困难   213 打家劫舍 II 动态规划 中等   214 最短回文串 字符串 困难   215 数组中的第 K 个最大元素 堆 , 分治算法 中等   216 组合总和 III 数组 , 回溯算法 中等   217 存在重复元素 数组 , 哈希表 简单   218 天际线问题 堆 , 树状数组 , 线段树 , 分治算法 困难   219 存在重复元素 II 数组 , 哈希表 简单   220 存在重复元素 III 排序 中等   221 最大正方形 动态规划 中等   222 完全二叉树的节点个数 树 , 二分查找 中等   223 矩形面积 数学 中等   224 基本计算器 栈 , 数学 困难   225 用队列实现栈 栈 , 设计 简单   226 翻转二叉树 树 简单   227 基本计算器 II 字符串 中等   228 汇总区间 数组 中等   229 求众数 II 数组 中等   230 二叉搜索树中第 K 小的元素 树 , 二分查找 中等   231 2 的幂 位运算 , 数学 简单   232 用栈实现队列 栈 , 设计 简单   233 数字 1 的个数 数学 困难   234 回文链表 链表 , 双指针 简单   235 二叉搜索树的最近公共祖先 树 简单   236 二叉树的最近公共祖先 树 中等   237 删除链表中的节点 链表 简单   238 除自身以外数组的乘积 数组 中等   239 滑动窗口最大值 堆 困难   240 搜索二维矩阵 II 二分查找 , 分治算法 中等   241 为运算表达式设计优先级 分治算法 中等   242 有效的字母异位词 排序 , 哈希表 简单   243 最短单词距离 数组 简单   244 最短单词距离 II 设计 , 哈希表 中等   245 最短单词距离 III 数组 中等   246 中心对称数 哈希表 , 数学 简单   247 中心对称数 II 递归 , 数学 中等   248 中心对称数 III 递归 , 数学 困难   249 移位字符串分组 哈希表 , 字符串 中等   250 统计同值子树 树 中等   251 展开二维向量 设计 中等   252 会议室 排序 简单   253 会议室 II 堆 , 贪心算法 , 排序 中等   254 因子的组合 回溯算法 中等   255 验证前序遍历序列二叉搜索树 栈 , 树 中等   256 粉刷房子 动态规划 简单   257 二叉树的所有路径 树 , 深度优先搜索 简单   258 各位相加 数学 简单   259 较小的三数之和 数组 , 双指针 中等   260 只出现一次的数字 III 位运算 中等   261 以图判树 深度优先搜索 , 广度优先搜索 , 并查集 , 图 中等   262 行程和用户 数据库 困难   263 丑数 数学 简单   264 丑数 II 堆 , 数学 , 动态规划 中等   265 粉刷房子 II 动态规划 困难   266 回文排列 哈希表 简单   267 回文排列 II 回溯算法 中等   268 缺失数字 位运算 , 数组 , 数学 简单   269 火星词典 图 , 拓扑排序 困难   270 最接近的二叉搜索树值 树 , 二分查找 简单   271 字符串的编码与解码 字符串 中等   272 最接近的二叉搜索树值 II 栈 , 树 困难   273 整数转换英文表示 数学 , 字符串 困难   274 H 指数 排序 , 哈希表 中等   275 H 指数 II 二分查找 中等   276 栅栏涂色 动态规划 简单   277 搜寻名人 数组 中等   278 第一个错误的版本 二分查找 简单   279 完全平方数 广度优先搜索 , 数学 , 动态规划 中等   280 摆动排序 排序 , 数组 中等   281 锯齿迭代器 设计 中等   282 给表达式添加运算符 分治算法 困难   283 移动零 数组 , 双指针 简单   284 顶端迭代器 设计 中等   285 二叉搜索树中的顺序后继 树 中等   286 墙与门 广度优先搜索 中等   287 寻找重复数 数组 , 双指针 , 二分查找 中等   288 单词的唯一缩写 设计 , 哈希表 中等   289 生命游戏 数组 中等   290 单词规律 哈希表 简单   291 单词规律 II 回溯算法 困难   292 Nim 游戏 脑筋急转弯 , 极小化极大 简单   293 翻转游戏 字符串 简单   294 翻转游戏 II 极小化极大 , 回溯算法 中等   295 数据流的中位数 堆 , 设计 困难   296 最佳的碰头地点 排序 , 数学 困难   297 二叉树的序列化与反序列化 树 , 设计 困难   298 二叉树最长连续序列 树 中等   299 猜数字游戏 哈希表 简单   300 最长上升子序列 二分查找 , 动态规划 中等   301 删除无效的括号 深度优先搜索 , 广度优先搜索 困难   302 包含全部黑色像素的最小矩形 二分查找 困难   303 区域和检索 - 数组不可变 动态规划 简单   304 二维区域和检索 - 矩阵不可变 动态规划 中等   305 岛屿数量 II 并查集 困难   306 累加数 回溯算法 中等   307 区域和检索 - 数组可修改 树状数组 , 线段树 中等   308 二维区域和检索 - 可变 树状数组 , 线段树 困难   309 最佳买卖股票时机含冷冻期 动态规划 中等   310 最小高度树 广度优先搜索 , 图 中等   311 稀疏矩阵的乘法 哈希表 中等   312 戳气球 分治算法 , 动态规划 困难   313 超级丑数 堆 , 数学 中等   314 二叉树的垂直遍历 哈希表 中等   315 计算右侧小于当前元素的个数 排序 , 树状数组 , 线段树 , 二分查找 , 分治算法 困难   316 去除重复字母 栈 , 贪心算法 困难   317 离建筑物最近的距离 广度优先搜索 困难   318 最大单词长度乘积 位运算 中等   319 灯泡开关 脑筋急转弯 , 数学 中等   320 列举单词的全部缩写 位运算 , 回溯算法 中等   321 拼接最大数 贪心算法 , 动态规划 困难   322 零钱兑换 动态规划 中等   323 无向图中连通分量的数目 深度优先搜索 , 广度优先搜索 , 并查集 , 图 中等   324 摆动排序 II 排序 中等   325 和等于 k 的最长子数组长度 哈希表 中等   326 3 的幂 数学 简单   327 区间和的个数 排序 , 树状数组 , 线段树 , 二分查找 , 分治算法 困难   328 奇偶链表 链表 中等   329 矩阵中的最长递增路径 深度优先搜索 , 拓扑排序 , 记忆化 困难   330 按要求补齐数组 贪心算法 困难   331 验证二叉树的前序序列化 栈 中等   332 重新安排行程 深度优先搜索 , 图 中等   333 最大 BST 子树 树 中等   334 递增的三元子序列  中等   335 路径交叉 数学 困难   336 回文对 字典树 , 哈希表 , 字符串 困难   337 打家劫舍 III 树 , 深度优先搜索 中等   338 比特位计数 位运算 , 动态规划 中等   339 嵌套列表权重和 深度优先搜索 简单   340 至多包含 K 个不同字符的最长子串 哈希表 , 字符串 困难   341 扁平化嵌套列表迭代器 栈 , 设计 中等   342 4 的幂 位运算 简单   343 整数拆分 数学 , 动态规划 中等   344 反转字符串 双指针 , 字符串 简单   345 反转字符串中的元音字母 双指针 , 字符串 简单   346 数据流中的移动平均值 设计 , 队列 简单   347 前 K 个高频元素 堆 , 哈希表 中等   348 判定井字棋胜负 设计 中等   349 两个数组的交集 排序 , 哈希表 , 双指针 , 二分查找 简单   350 两个数组的交集 II 排序 , 哈希表 , 双指针 , 二分查找 简单   351 安卓系统手势解锁 动态规划 , 回溯算法 中等   352 将数据流变为多个不相交区间 二分查找 困难   353 贪吃蛇 设计 , 队列 中等   354 俄罗斯套娃信封问题 二分查找 , 动态规划 困难   355 设计推特 堆 , 设计 , 哈希表 中等   356 直线镜像 哈希表 , 数学 中等   357 计算各个位数不同的数字个数 数学 , 动态规划 , 回溯算法 中等   358 K 距离间隔重排字符串 堆 , 贪心算法 , 哈希表 困难   359 日志速率限制器 设计 , 哈希表 简单   360 有序转化数组 数学 , 双指针 中等   361 轰炸敌人 动态规划 中等   362 敲击计数器 设计 中等   363 矩形区域不超过 K 的最大数值和 队列 , 二分查找 , 动态规划 困难   364 加权嵌套序列和 II 深度优先搜索 中等   365 水壶问题 数学 中等   366 寻找二叉树的叶子节点 树 , 深度优先搜索 中等   367 有效的完全平方数 数学 , 二分查找 简单   368 最大整除子集 数学 , 动态规划 中等   369 给单链表加一 链表 中等   370 区间加法 数组 中等   371 两整数之和 位运算 简单   372 超级次方 数学 中等   373 查找和最小的 K 对数字 堆 中等   374 猜数字大小 二分查找 简单   375 猜数字大小 II 极小化极大 , 动态规划 中等   376 摆动序列 贪心算法 , 动态规划 中等   377 组合总和 Ⅳ 动态规划 中等   378 有序矩阵中第 K 小的元素 堆 , 二分查找 中等   379 电话目录管理系统 设计 , 链表 中等   380 常数时间插入、删除和获取随机元素 设计 , 数组 , 哈希表 中等   381 O (1) 时间插入、删除和获取随机元素 - 允许重复 设计 , 数组 , 哈希表 困难   382 链表随机节点 蓄水池抽样 中等   383 赎金信 字符串 简单   384 打乱数组  中等   385 迷你语法分析器 栈 , 字符串 中等   386 字典序排数  中等   387 字符串中的第一个唯一字符 哈希表 , 字符串 简单   388 文件的最长绝对路径  中等   389 找不同 位运算 , 哈希表 简单   390 消除游戏  中等   391 完美矩形  困难   392 判断子序列 贪心算法 , 二分查找 , 动态规划 简单   393 UTF-8 编码验证 位运算 中等   394 字符串解码 栈 , 深度优先搜索 中等   395 至少有 K 个重复字符的最长子串  中等   396 旋转函数 数学 中等   397 整数替换 位运算 , 数学 中等   398 随机数索引 蓄水池抽样 中等   399 除法求值 并查集 , 图 中等   400 第 N 个数字 数学 中等   401 二进制手表 位运算 , 回溯算法 简单   402 移掉 K 位数字 栈 , 贪心算法 中等   403 青蛙过河 动态规划 困难   404 左叶子之和 树 简单   405 数字转换为十六进制数 位运算 简单   406 根据身高重建队列 贪心算法 中等   407 接雨水 II 堆 , 广度优先搜索 困难   408 有效单词缩写 字符串 简单   409 最长回文串 哈希表 简单   410 分割数组的最大值 二分查找 , 动态规划 困难   411 最短特异单词缩写 位运算 , 回溯算法 困难   412 Fizz Buzz  简单   413 等差数列划分 数学 , 动态规划 中等   414 第三大的数 数组 简单   415 字符串相加 字符串 简单   416 分割等和子集 动态规划 中等   417 太平洋大西洋水流问题 深度优先搜索 , 广度优先搜索 中等   418 屏幕可显示句子的数量 动态规划 中等   419 甲板上的战舰  中等   420 强密码检验器  困难   421 数组中两个数的最大异或值 位运算 , 字典树 中等   422 有效的单词方块  简单   423 从英文中重建数字 数学 中等   424 替换后的最长重复字符 双指针 中等   425 单词方块 字典树 , 回溯算法 困难   426 将二叉搜索树转化为排序的双向链表 树 , 链表 , 分治算法 中等   427 建立四叉树  中等   428 序列化和反序列化 N 叉树 树 困难   429 N 叉树的层序遍历 树 , 广度优先搜索 中等   430 扁平化多级双向链表 深度优先搜索 , 链表 中等   431 将 N 叉树编码为二叉树 树 困难   432 全 O (1) 的数据结构 设计 困难   433 最小基因变化  中等   434 字符串中的单词数 字符串 简单   435 无重叠区间 贪心算法 中等   436 寻找右区间 二分查找 中等   437 路径总和 III 树 简单   438 找到字符串中所有字母异位词 哈希表 中等   439 三元表达式解析器 栈 , 深度优先搜索 中等   440 字典序的第 K 小数字  困难   441 排列硬币 数学 , 二分查找 简单   442 数组中重复的数据 数组 中等   443 压缩字符串 字符串 简单   444 序列重建 图 , 拓扑排序 中等   445 两数相加 II 链表 中等   446 等差数列划分 II - 子序列 动态规划 困难   447 回旋镖的数量 哈希表 简单   448 找到所有数组中消失的数字 数组 简单   449 序列化和反序列化二叉搜索树 树 中等   450 删除二叉搜索树中的节点 树 中等   451 根据字符出现频率排序 堆 , 哈希表 中等   452 用最少数量的箭引爆气球 贪心算法 中等   453 最小移动次数使数组元素相等 数学 简单   454 四数相加 II 哈希表 , 二分查找 中等   455 分发饼干 贪心算法 简单   456 132 模式 栈 中等   457 环形数组循环 数组 , 双指针 中等   458 可怜的小猪 数学 困难   459 重复的子字符串 字符串 简单   460 LFU 缓存 设计 困难   461 汉明距离 位运算 简单   462 最少移动次数使数组元素相等 II 数学 中等   463 岛屿的周长 哈希表 简单   464 我能赢吗 极小化极大 , 动态规划 中等   465 最优账单平衡  困难   466 统计重复个数 动态规划 困难   467 环绕字符串中唯一的子字符串 动态规划 中等   468 验证 IP 地址 字符串 中等   469 凸多边形 数学 中等   470 用 Rand7 () 实现 Rand10 ()  中等   471 编码最短长度的字符串 动态规划 困难   472 连接词 深度优先搜索 , 字典树 , 动态规划 困难   473 火柴拼正方形 深度优先搜索 中等   474 一和零 动态规划 中等   475 供暖器 二分查找 简单   476 数字的补数 位运算 简单   477 汉明距离总和 位运算 中等   478 在圆内随机生成点 数学 中等   479 最大回文数乘积  困难   480 滑动窗口中位数  困难   481 神奇字符串  中等   482 密钥格式化  简单   483 最小好进制 数学 , 二分查找 困难   484 寻找排列 贪心算法 中等   485 最大连续 1 的个数 数组 简单   486 预测赢家 极小化极大 , 动态规划 中等   487 最大连续 1 的个数 II 双指针 中等   488 祖玛游戏 深度优先搜索 困难   489 扫地机器人 深度优先搜索 困难   490 迷宫 深度优先搜索 , 广度优先搜索 中等   491 递增子序列 深度优先搜索 中等   492 构造矩形  简单   493 翻转对 排序 , 树状数组 , 线段树 , 二分查找 , 分治算法 困难   494 目标和 深度优先搜索 , 动态规划 中等   495 提莫攻击 数组 中等   496 下一个更大元素 I 栈 简单   497 非重叠矩形中的随机点 二分查找 中等   498 对角线遍历  中等   499 迷宫 III 深度优先搜索 , 广度优先搜索 困难   500 键盘行 哈希表 简单   501 二叉搜索树中的众数 树 简单   502 IPO 堆 , 贪心算法 困难   503 下一个更大元素 II 栈 中等   504 七进制数  简单   505 迷宫 II 深度优先搜索 , 广度优先搜索 中等   506 相对名次  简单   507 完美数 数学 简单   508 出现次数最多的子树元素和 树 , 哈希表 中等   509 斐波那契数 数组 简单   510 二叉搜索树中的中序后继 II 树 中等   511 游戏玩法分析 I 数据库 简单   512 游戏玩法分析 II 数据库 简单   513 找树左下角的值 树 , 深度优先搜索 , 广度优先搜索 中等   514 自由之路 深度优先搜索 , 分治算法 , 动态规划 困难   515 在每个树行中找最大值 树 , 深度优先搜索 , 广度优先搜索 中等   516 最长回文子序列 动态规划 中等   517 超级洗衣机 数学 , 动态规划 困难   518 零钱兑换 II  中等   519 随机翻转矩阵  中等   520 检测大写字母 字符串 简单   521 最长特殊序列 Ⅰ 字符串 简单   522 最长特殊序列 II 字符串 中等   523 连续的子数组和 数学 , 动态规划 中等   524 通过删除字母匹配到字典里最长单词 排序 , 双指针 中等   525 连续数组 哈希表 中等   526 优美的排列 回溯算法 中等   527 单词缩写 排序 , 字符串 困难   528 按权重随机选择 二分查找 中等   529 扫雷游戏 深度优先搜索 , 广度优先搜索 中等   530 二叉搜索树的最小绝对差 树 简单   531 孤独像素 I 深度优先搜索 , 数组 中等   532 数组中的 K-diff 数对 数组 , 双指针 简单   533 孤独像素 II 深度优先搜索 , 数组 中等   534 游戏玩法分析 III 数据库 中等   535 TinyURL 的加密与解密 哈希表 , 数学 中等   536 从字符串生成二叉树 树 , 字符串 中等   537 复数乘法 数学 , 字符串 中等   538 把二叉搜索树转换为累加树 树 简单   539 最小时间差 字符串 中等   540 有序数组中的单一元素  中等   541 反转字符串 II 字符串 简单   542 01 矩阵 深度优先搜索 , 广度优先搜索 中等   543 二叉树的直径 树 简单   544 输出比赛匹配对 递归 , 字符串 中等   545 二叉树的边界 树 中等   546 移除盒子 深度优先搜索 , 动态规划 困难   547 朋友圈 深度优先搜索 , 并查集 中等   548 将数组分割成和相等的子数组 数组 中等   549 二叉树中最长的连续序列 树 中等   550 游戏玩法分析 IV 数据库 中等   551 学生出勤记录 I 字符串 简单   552 学生出勤记录 II 动态规划 困难   553 最优除法 数学 , 字符串 中等   554 砖墙 哈希表 中等   555 分割连接字符串 字符串 中等   556 下一个更大元素 III 字符串 中等   557 反转字符串中的单词 III 字符串 简单   558 四叉树交集  中等   559 N 叉树的最大深度 树 , 深度优先搜索 , 广度优先搜索 简单   560 和为 K 的子数组 数组 , 哈希表 中等   561 数组拆分 I 数组 简单   562 矩阵中最长的连续 1 线段 数组 中等   563 二叉树的坡度 树 简单   564 寻找最近的回文数 字符串 困难   565 数组嵌套 数组 中等   566 重塑矩阵 数组 简单   567 字符串的排列 双指针 中等   568 最大休假天数 动态规划 困难   569 员工薪水中位数 数据库 困难   570 至少有 5 名直接下属的经理 数据库 中等   571 给定数字的频率查询中位数 数据库 困难   572 另一个树的子树 树 简单   573 松鼠模拟 数学 中等   574 当选者 数据库 中等   575 分糖果 哈希表 简单   576 出界的路径数 深度优先搜索 , 动态规划 中等   577 员工奖金 数据库 简单   578 查询回答率最高的问题 数据库 中等   579 查询员工的累计薪水 数据库 困难   580 统计各专业学生人数 数据库 中等   581 最短无序连续子数组 数组 简单   582 杀死进程 树 , 队列 中等   583 两个字符串的删除操作 字符串 中等   584 寻找用户推荐人 数据库 简单   585 2016 年的投资 数据库 中等   586 订单最多的客户 数据库 简单   587 安装栅栏 几何 困难   588 设计内存文件系统 设计 困难   589 N 叉树的前序遍历 树 简单   590 N 叉树的后序遍历 树 简单   591 标签验证器 栈 , 字符串 困难   592 分数加减运算 数学 中等   593 有效的正方形 数学 中等   594 最长和谐子序列 哈希表 简单   595 大的国家 数据库 简单   596 超过 5 名学生的课 数据库 简单   597 好友申请 I ：总体通过率 数据库 简单   598 范围求和 II 数学 简单   599 两个列表的最小索引总和 哈希表 简单   600 不含连续 1 的非负整数 动态规划 困难   601 体育馆的人流量 数据库 困难   602 好友申请 II ：谁有最多的好友 数据库 中等   603 连续空余座位 数据库 简单   604 迭代压缩字符串 设计 简单   605 种花问题 数组 简单   606 根据二叉树创建字符串 树 , 字符串 简单   607 销售员 数据库 简单   608 树节点 数据库 中等   609 在系统中查找重复文件 哈希表 , 字符串 中等   610 判断三角形 数据库 简单   611 有效三角形的个数 数组 中等   612 平面上的最近距离 数据库 中等   613 直线上的最近距离 数据库 简单   614 二级关注者 数据库 中等   615 平均工资：部门与公司比较 数据库 困难   616 给字符串添加加粗标签 字符串 中等   617 合并二叉树 树 简单   618 学生地理信息报告 数据库 困难   619 只出现一次的最大数字 数据库 简单   620 有趣的电影 数据库 简单   621 任务调度器 贪心算法 , 队列 , 数组 中等   622 设计循环队列 设计 , 队列 中等   623 在二叉树中增加一行 树 中等   624 数组列表中的最大距离 数组 , 哈希表 简单   625 最小因式分解 递归 , 数学 中等   626 换座位 数据库 中等   627 交换工资 数据库 简单   628 三个数的最大乘积 数组 , 数学 简单   629 K 个逆序对数组 动态规划 困难   630 课程表 III 贪心算法 困难   631 设计 Excel 求和公式 设计 困难   632 最小区间 哈希表 , 双指针 , 字符串 困难   633 平方数之和 数学 简单   634 寻找数组的错位排列 数学 中等   635 设计日志存储系统 设计 , 字符串 中等   636 函数的独占时间 栈 中等   637 二叉树的层平均值 树 简单   638 大礼包 深度优先搜索 , 动态规划 中等   639 解码方法 2 动态规划 困难   640 求解方程 数学 中等   641 设计循环双端队列 设计 , 队列 中等   642 设计搜索自动补全系统 设计 , 字典树 困难   643 子数组最大平均数 I 数组 简单   644 最大平均子段和 II 数组 , 二分查找 困难   645 错误的集合 哈希表 , 数学 简单   646 最长数对链 动态规划 中等   647 回文子串 字符串 , 动态规划 中等   648 单词替换 字典树 , 哈希表 中等   649 Dota2 参议院 贪心算法 中等   650 只有两个键的键盘 动态规划 中等   651 4 键键盘 贪心算法 , 数学 , 动态规划 中等   652 寻找重复的子树 树 中等   653 两数之和 IV - 输入 BST 树 简单   654 最大二叉树 树 中等   655 输出二叉树 树 中等   656 金币路径 动态规划 困难   657 机器人能否返回原点 字符串 简单   658 找到 K 个最接近的元素 二分查找 中等   659 分割数组为连续子序列 堆 , 贪心算法 中等   660 移除 9 数学 困难   661 图片平滑器 数组 简单   662 二叉树最大宽度 树 中等   663 均匀树划分 树 中等   664 奇怪的打印机 深度优先搜索 , 动态规划 困难   665 非递减数列 数组 简单   666 路径和 IV 树 中等   667 优美的排列 II 数组 中等   668 乘法表中第 k 小的数 二分查找 困难   669 修剪二叉搜索树 树 简单   670 最大交换 数组 , 数学 中等   671 二叉树中第二小的节点 树 简单   672 灯泡开关 Ⅱ 数学 中等   673 最长递增子序列的个数 动态规划 中等   674 最长连续递增序列 数组 简单   675 为高尔夫比赛砍树 广度优先搜索 困难   676 实现一个魔法字典 字典树 , 哈希表 中等   677 键值映射 字典树 中等   678 有效的括号字符串 字符串 中等   679 24 点游戏 深度优先搜索 困难   680 验证回文字符串 Ⅱ 字符串 简单   681 最近时刻 字符串 中等   682 棒球比赛 栈 简单   683 K 个空花盆  困难   684 冗余连接 树 , 并查集 , 图 中等   685 冗余连接 II 树 , 深度优先搜索 , 并查集 , 图 困难   686 重复叠加字符串匹配 字符串 简单   687 最长同值路径 树 , 递归 简单   688 “马” 在棋盘上的概率 动态规划 中等   689 三个无重叠子数组的最大和 数组 , 动态规划 困难   690 员工的重要性 深度优先搜索 , 广度优先搜索 , 哈希表 简单   691 贴纸拼词 动态规划 , 回溯算法 困难   692 前 K 个高频单词 堆 , 字典树 , 哈希表 中等   693 交替位二进制数 位运算 简单   694 不同岛屿的数量 深度优先搜索 , 哈希表 中等   695 岛屿的最大面积 深度优先搜索 , 数组 中等   696 计数二进制子串 字符串 简单   697 数组的度 数组 简单   698 划分为 k 个相等的子集 递归 , 动态规划 中等   699 掉落的方块 线段树 困难   700 二叉搜索树中的搜索 树 简单   701 二叉搜索树中的插入操作 树 中等   702 搜索长度未知的有序数组 二分查找 中等   703 数据流中的第 K 大元素 堆 简单   704 二分查找 二分查找 简单   705 设计哈希集合 设计 , 哈希表 简单   706 设计哈希映射 设计 , 哈希表 简单   707 设计链表 设计 , 链表 中等   708 循环有序列表的插入 链表 中等   709 转换成小写字母 字符串 简单   710 黑名单中的随机数 排序 , 哈希表 , 二分查找 困难   711 不同岛屿的数量 II 深度优先搜索 , 哈希表 困难   712 两个字符串的最小 ASCII 删除和 动态规划 中等   713 乘积小于 K 的子数组 数组 , 双指针 中等   714 买卖股票的最佳时机含手续费 贪心算法 , 数组 , 动态规划 中等   715 Range 模块 线段树 困难   716 最大栈 设计 简单   717 1 比特与 2 比特字符 数组 简单   718 最长重复子数组 数组 , 哈希表 , 二分查找 , 动态规划 中等   719 找出第 k 小的距离对 堆 , 数组 , 二分查找 困难   720 词典中最长的单词 字典树 , 哈希表 简单   721 账户合并 深度优先搜索 , 并查集 中等   722 删除注释 字符串 中等   723 粉碎糖果 数组 , 双指针 中等   724 寻找数组的中心索引 数组 简单   725 分隔链表 链表 中等   726 原子的数量 栈 , 递归 , 哈希表 困难   727 最小窗口子序列 动态规划 困难   728 自除数 数学 简单   729 我的日程安排表 I 数组 中等   730 统计不同回文子字符串 字符串 , 动态规划 困难   731 我的日程安排表 II  中等   732 我的日程安排表 III 线段树 困难   733 图像渲染 深度优先搜索 简单   734 句子相似性 哈希表 简单   735 行星碰撞 栈 中等   736 Lisp 语法解析 字符串 困难   737 句子相似性 II 深度优先搜索 , 并查集 中等   738 单调递增的数字 贪心算法 中等   739 每日温度 栈 , 哈希表 中等   740 删除与获得点数 动态规划 中等   741 摘樱桃 动态规划 困难   742 二叉树最近的叶节点 树 中等   743 网络延迟时间 堆 , 深度优先搜索 , 广度优先搜索 , 图 中等   744 寻找比目标字母大的最小字母 二分查找 简单   745 前缀和后缀搜索 字典树 困难   746 使用最小花费爬楼梯 数组 , 动态规划 简单   747 至少是其他数字两倍的最大数 数组 简单   748 最短完整词 哈希表 简单   749 隔离病毒 深度优先搜索 困难   750 角矩形的数量 动态规划 中等   751 IP 到 CIDR 位运算 简单   752 打开转盘锁 广度优先搜索 中等   753 破解保险箱 深度优先搜索 , 数学 困难   754 到达终点数字 数学 中等   755 倒水 数组 中等   756 金字塔转换矩阵 位运算 , 深度优先搜索 中等   757 设置交集大小至少为 2 贪心算法 困难   758 字符串中的加粗单词 字符串 简单   759 员工空闲时间 堆 , 贪心算法 困难   760 找出变位映射 哈希表 简单   761 特殊的二进制序列 递归 , 字符串 困难   762 二进制表示中质数个计算置位 位运算 简单   763 划分字母区间 贪心算法 , 双指针 中等   764 最大加号标志 动态规划 中等   765 情侣牵手 贪心算法 , 并查集 , 图 困难   766 托普利茨矩阵 数组 简单   767 重构字符串 堆 , 贪心算法 , 排序 , 字符串 中等   768 最多能完成排序的块 II 数组 困难   769 最多能完成排序的块 数组 中等   770 基本计算器 IV 栈 , 哈希表 , 字符串 困难   771 宝石与石头 哈希表 简单   772 基本计算器 III 栈 , 字符串 困难   773 滑动谜题 广度优先搜索 困难   774 最小化去加油站的最大距离 二分查找 困难   775 全局倒置与局部倒置 数组 , 数学 中等   776 拆分二叉搜索树 树 , 递归 中等   777 在 LR 字符串中交换相邻字符 脑筋急转弯 中等   778 水位上升的泳池中游泳 堆 , 深度优先搜索 , 并查集 , 二分查找 困难   779 第 K 个语法符号 递归 中等   780 到达终点 数学 困难   781 森林中的兔子 哈希表 , 数学 中等   782 变为棋盘 数组 , 数学 困难   783 二叉搜索树结点最小距离 树 , 递归 简单   784 字母大小写全排列 位运算 , 回溯算法 简单   785 判断二分图 深度优先搜索 , 广度优先搜索 , 图 中等   786 第 K 个最小的素数分数 堆 , 二分查找 困难   787 K 站中转内最便宜的航班 堆 , 广度优先搜索 , 动态规划 中等   788 旋转数字 字符串 简单   789 逃脱阻碍者 数学 中等   790 多米诺和托米诺平铺 动态规划 中等   791 自定义字符串排序 字符串 中等   792 匹配子序列的单词数 数组 中等   793 阶乘函数后 K 个零 二分查找 困难   794 有效的井字游戏 递归 , 数学 中等   795 区间子数组个数 数组 中等   796 旋转字符串  简单   797 所有可能的路径  中等   798 得分最高的最小轮调  困难   799 香槟塔  中等   800 相似 RGB 颜色 数学 , 字符串 简单   801 使序列递增的最小交换次数 动态规划 中等   802 找到最终的安全状态 深度优先搜索 , 图 中等   803 打砖块 并查集 困难   804 唯一摩尔斯密码词 字符串 简单   805 数组的均值分割 数学 困难   806 写字符串需要的行数  简单   807 保持城市天际线  中等   808 分汤 动态规划 中等   809 情感丰富的文字 字符串 中等   810 黑板异或游戏 数学 困难   811 子域名访问计数 哈希表 简单   812 最大三角形面积 数学 简单   813 最大平均值和的分组 动态规划 中等   814 二叉树剪枝 树 中等   815 公交路线 广度优先搜索 困难   816 模糊坐标 字符串 中等   817 链表组件 链表 中等   818 赛车 堆 , 动态规划 困难   819 最常见的单词 字符串 简单   820 单词的压缩编码  中等   821 字符的最短距离  简单   822 翻转卡片游戏  中等   823 带因子的二叉树  中等   824 山羊拉丁文 字符串 简单   825 适龄的朋友 数组 中等   826 安排工作以达到最大收益 双指针 中等   827 最大人工岛 深度优先搜索 困难   828 统计子串中的唯一字符 双指针 困难   829 连续整数求和 数学 困难   830 较大分组的位置 数组 简单   831 隐藏个人信息 字符串 中等   832 翻转图像 数组 简单   833 字符串中的查找与替换 字符串 中等   834 树中距离之和 树 , 深度优先搜索 困难   835 图像重叠 数组 中等   836 矩形重叠 数学 简单   837 新 21 点 动态规划 中等   838 推多米诺 双指针 , 动态规划 中等   839 相似字符串组 深度优先搜索 , 并查集 , 图 困难   840 矩阵中的幻方 数组 简单   841 钥匙和房间 深度优先搜索 , 图 中等   842 将数组拆分成斐波那契序列 贪心算法 , 字符串 , 回溯算法 中等   843 猜猜这个单词 极小化极大 困难   844 比较含退格的字符串 栈 , 双指针 简单   845 数组中的最长山脉 双指针 中等   846 一手顺子  中等   847 访问所有节点的最短路径 广度优先搜索 , 动态规划 困难   848 字母移位 字符串 中等   849 到最近的人的最大距离 数组 简单   850 矩形面积 II 线段树 困难   851 喧闹和富有 深度优先搜索 中等   852 山脉数组的峰顶索引 二分查找 简单   853 车队 排序 中等   854 相似度为 K 的字符串 广度优先搜索 , 图 困难   855 考场就座  中等   856 括号的分数 栈 , 字符串 中等   857 雇佣 K 名工人的最低成本 堆 困难   858 镜面反射 数学 中等   859 亲密字符串 字符串 简单   860 柠檬水找零 贪心算法 简单   861 翻转矩阵后的得分 贪心算法 中等   862 和至少为 K 的最短子数组 队列 , 二分查找 困难   863 二叉树中所有距离为 K 的结点 树 , 深度优先搜索 , 广度优先搜索 中等   864 获取所有钥匙的最短路径 堆 , 广度优先搜索 困难   865 具有所有最深结点的最小子树 树 中等   866 回文素数 数学 中等   867 转置矩阵 数组 简单   868 二进制间距 数学 简单   869 重新排序得到 2 的幂 数学 中等   870 优势洗牌 贪心算法 , 数组 中等   871 最低加油次数 堆 , 动态规划 困难   872 叶子相似的树 树 , 深度优先搜索 简单   873 最长的斐波那契子序列的长度 数组 , 动态规划 中等   874 模拟行走机器人 贪心算法 简单   875 爱吃香蕉的珂珂 二分查找 中等   876 链表的中间结点 链表 简单   877 石子游戏 极小化极大 , 数学 , 动态规划 中等   878 第 N 个神奇数字 数学 , 二分查找 困难   879 盈利计划 动态规划 困难   880 索引处的解码字符串 栈 中等   881 救生艇 贪心算法 , 双指针 中等   882 细分图中的可到达结点 堆 困难   883 三维形体投影面积 数学 简单   884 两句话中的不常见单词 哈希表 简单   885 螺旋矩阵 III 数学 中等   886 可能的二分法 深度优先搜索 中等   887 鸡蛋掉落 数学 , 二分查找 , 动态规划 困难   888 公平的糖果交换 数组 简单   889 根据前序和后序遍历构造二叉树 树 中等   890 查找和替换模式 字符串 中等   891 子序列宽度之和 数组 , 数学 困难   892 三维形体的表面积 几何 , 数学 简单   893 特殊等价字符串组 字符串 简单   894 所有可能的满二叉树 树 , 递归 中等   895 最大频率栈 栈 , 哈希表 困难   896 单调数列 数组 简单   897 递增顺序查找树 树 , 深度优先搜索 简单   898 子数组按位或操作 位运算 , 动态规划 中等   899 有序队列 数学 , 字符串 困难   900 RLE 迭代器 数组 中等   901 股票价格跨度 栈 中等   902 最大为 N 的数字组合 数学 , 动态规划 困难   903 DI 序列的有效排列 分治算法 , 动态规划 困难   904 水果成篮 双指针 中等   905 按奇偶排序数组 数组 简单   906 超级回文数 数学 困难   907 子数组的最小值之和 栈 , 数组 中等   908 最小差值 I 数学 简单   909 蛇梯棋 广度优先搜索 中等   910 最小差值 II 贪心算法 , 数学 中等   911 在线选举 二分查找 中等   912 排序数组  中等   913 猫和老鼠 广度优先搜索 , 极小化极大 困难   914 卡牌分组 数组 , 数学 简单   915 分割数组 数组 中等   916 单词子集 字符串 中等   917 仅仅反转字母 字符串 简单   918 环形子数组的最大和 数组 中等   919 完全二叉树插入器 树 中等   920 播放列表的数量 动态规划 困难   921 使括号有效的最少添加 栈 , 贪心算法 中等   922 按奇偶排序数组 II 排序 , 数组 简单   923 三数之和的多种可能 双指针 中等   924 尽量减少恶意软件的传播 深度优先搜索 , 并查集 困难   925 长按键入 双指针 , 字符串 简单   926 将字符串翻转到单调递增 数组 中等   927 三等分 贪心算法 , 数学 , 二分查找 困难   928 尽量减少恶意软件的传播 II 深度优先搜索 , 并查集 , 图 困难   929 独特的电子邮件地址 字符串 简单   930 和相同的二元子数组 哈希表 , 双指针 中等   931 下降路径最小和 动态规划 中等   932 漂亮数组 分治算法 中等   933 最近的请求次数 队列 简单   934 最短的桥 深度优先搜索 , 广度优先搜索 中等   935 骑士拨号器 动态规划 中等   936 戳印序列 贪心算法 , 字符串 困难   937 重新排列日志文件 字符串 简单   938 二叉搜索树的范围和 树 , 递归 简单   939 最小面积矩形 哈希表 中等   940 不同的子序列 II 动态规划 困难   941 有效的山脉数组 数组 简单   942 增减字符串匹配 数学 简单   943 最短超级串 动态规划 困难   944 删列造序 贪心算法 简单   945 使数组唯一的最小增量 数组 中等   946 验证栈序列 栈 中等   947 移除最多的同行或同列石头 深度优先搜索 , 并查集 中等   948 令牌放置 贪心算法 中等   949 给定数字能组成的最大时间 数学 简单   950 按递增顺序显示卡牌 数组 中等   951 翻转等价二叉树 树 中等   952 按公因数计算最大组件大小 并查集 , 数学 困难   953 验证外星语词典 哈希表 简单   954 二倍数对数组 数组 , 哈希表 中等   955 删列造序 II 贪心算法 中等   956 最高的广告牌 动态规划 困难   957 N 天后的牢房 哈希表 中等   958 二叉树的完全性检验 树 中等   959 由斜杠划分区域 深度优先搜索 , 并查集 , 图 中等   960 删列造序 III 动态规划 困难   961 重复 N 次的元素 哈希表 简单   962 最大宽度坡 数组 中等   963 最小面积矩形 II 几何 , 数学 中等   964 表示数字的最少运算符 数学 , 动态规划 困难   965 单值二叉树 树 简单   966 元音拼写检查器 哈希表 , 字符串 中等   967 连续差相同的数字 动态规划 中等   968 监控二叉树 树 , 深度优先搜索 , 动态规划 困难   969 煎饼排序 排序 , 数组 中等   970 强整数 哈希表 , 数学 简单   971 翻转二叉树以匹配先序遍历 树 , 深度优先搜索 中等   972 相等的有理数 数学 困难   973 最接近原点的 K 个点 堆 , 排序 , 分治算法 中等   974 和可被 K 整除的子数组 数组 , 哈希表 中等   975 奇偶跳 栈 , 动态规划 困难   976 三角形的最大周长 排序 , 数学 简单   977 有序数组的平方 数组 , 双指针 简单   978 最长湍流子数组 数组 , 动态规划 中等   979 在二叉树中分配硬币 树 , 深度优先搜索 中等   980 不同路径 III 深度优先搜索 , 回溯算法 困难   981 基于时间的键值存储 哈希表 , 二分查找 中等   982 按位与为零的三元组 动态规划 困难   983 最低票价 动态规划 中等   984 不含 AAA 或 BBB 的字符串 贪心算法 中等   985 查询后的偶数和 数组 简单   986 区间列表的交集 双指针 中等   987 二叉树的垂序遍历 树 , 哈希表 中等   988 从叶结点开始的最小字符串 树 , 深度优先搜索 中等   989 数组形式的整数加法 数组 简单   990 等式方程的可满足性 并查集 , 图 中等   991 坏了的计算器 贪心算法 , 数学 中等   992 K 个不同整数的子数组 哈希表 , 双指针 困难   993 二叉树的堂兄弟节点 树 , 广度优先搜索 简单   994 腐烂的橘子 广度优先搜索 简单   995 K 连续位的最小翻转次数 贪心算法 困难   996 正方形数组的数目 图 , 数学 , 回溯算法 困难   997 找到小镇的法官 图 简单   998 最大二叉树 II 树 中等   999 车的可用捕获量 数组 简单   1000 合并石头的最低成本 动态规划 困难   1001 网格照明 哈希表 困难   1002 查找常用字符 数组 , 哈希表 简单   1003 检查替换后的词是否有效 栈 , 字符串 中等   1004 最大连续 1 的个数 III 双指针 中等   1005 K 次取反后最大化的数组和 贪心算法 简单   1006 笨阶乘 数学 中等   1007 行相等的最少多米诺旋转 贪心算法 , 数组 中等   1008 先序遍历构造二叉树 树 中等   1009 十进制整数的反码 数学 简单   1010 总持续时间可被 60 整除的歌曲 数组 简单   1011 在 D 天内送达包裹的能力 数组 , 二分查找 中等   1012 至少有 1 位重复的数字 数学 , 动态规划 困难   1013 将数组分成和相等的三个部分 数组 简单   1014 最佳观光组合 数组 中等   1015 可被 K 整除的最小整数 数学 中等   1016 子串能表示从 1 到 N 数字的二进制串 字符串 中等   1017 负二进制转换 数学 中等   1018 可被 5 整除的二进制前缀 数组 简单   1019 链表中的下一个更大节点 栈 , 链表 中等   1020 飞地的数量 深度优先搜索 中等   1021 删除最外层的括号 栈 简单   1022 从根到叶的二进制数之和 树 简单   1023 驼峰式匹配 字典树 , 字符串 中等   1024 视频拼接 动态规划 中等   1025 除数博弈 数学 , 动态规划 简单   1026 节点与其祖先之间的最大差值 树 , 深度优先搜索 中等   1027 最长等差数列 动态规划 中等   1028 从先序遍历还原二叉树 树 , 深度优先搜索 困难   1029 两地调度 贪心算法 简单   1030 距离顺序排列矩阵单元格 排序 简单   1031 两个非重叠子数组的最大和 数组 中等   1032 字符流 字典树 困难   1033 移动石子直到连续 脑筋急转弯 简单   1034 边框着色 深度优先搜索 中等   1035 不相交的线 数组 中等   1036 逃离大迷宫 广度优先搜索 困难   1037 有效的回旋镖 数学 简单   1038 从二叉搜索树到更大和树 二叉搜索树 中等   1039 多边形三角剖分的最低得分 动态规划 中等   1040 移动石子直到连续 II 数组 中等   1041 困于环中的机器人 数学 中等   1042 不邻接植花 图 简单   1043 分隔数组以得到最大和 图 中等   1044 最长重复子串 哈希表 , 二分查找 困难   1045 买下所有产品的客户 数据库 中等   1046 最后一块石头的重量 堆 , 贪心算法 简单   1047 删除字符串中的所有相邻重复项 栈 简单   1048 最长字符串链 哈希表 , 动态规划 中等   1049 最后一块石头的重量 II 动态规划 中等   1050 合作过至少三次的演员和导演 数据库 简单   1051 高度检查器 数组 简单   1052 爱生气的书店老板 数组 中等   1053 交换一次的先前排列 贪心算法 , 数组 中等   1054 距离相等的条形码 堆 , 排序 中等   1055 形成字符串的最短路径 贪心算法 , 动态规划 中等   1056 易混淆数 数学 简单   1057 校园自行车分配 贪心算法 , 排序 中等   1058 最小化舍入误差以满足目标 贪心算法 , 数学 , 动态规划 中等   1059 从始点到终点的所有路径 深度优先搜索 , 图 中等   1060 有序数组中的缺失元素 二分查找 中等   1061 按字典序排列最小的等效字符串 深度优先搜索 , 并查集 中等   1062 最长重复子串 字符串 中等   1063 有效子数组的数目 栈 困难   1064 不动点 数组 , 二分查找 简单   1065 字符串的索引对 字典树 , 字符串 简单   1066 校园自行车分配 II 动态规划 , 回溯算法 中等   1067 范围内的数字计数 数学 , 动态规划 困难   1068 产品销售分析 I 数据库 简单   1069 产品销售分析 II 数据库 简单   1070 产品销售分析 III 数据库 中等   1071 字符串的最大公因子 字符串 简单   1072 按列翻转得到最大值等行数 哈希表 中等   1073 负二进制数相加 数学 中等   1074 元素和为目标值的子矩阵数量 数组 , 动态规划 困难   1075 项目员工 I 数据库 简单   1076 项目员工 II 数据库 简单   1077 项目员工 III 数据库 中等   1078 Bigram 分词 哈希表 简单   1079 活字印刷 回溯算法 中等   1080 根到叶路径上的不足节点 深度优先搜索 中等   1081 不同字符的最小子序列 字符串 中等   1082 销售分析 I 数据库 简单   1083 销售分析 II 数据库 简单   1084 销售分析 III 数据库 简单   1085 最小元素各数位之和 数组 简单   1086 前五科的均分 排序 , 数组 , 哈希表 简单   1087 字母切换 回溯算法 中等   1088 易混淆数 II 数学 , 回溯算法 困难   1089 复写零 数组 简单   1090 受标签影响的最大值 贪心算法 , 哈希表 中等   1091 二进制矩阵中的最短路径 广度优先搜索 中等   1092 最短公共超序列 动态规划 困难   1093 大样本统计 数学 , 双指针 中等   1094 拼车 贪心算法 中等   1095 山脉数组中查找目标值 二分查找 困难   1096 花括号展开 II 字符串 困难   1097 游戏玩法分析 V 数据库 困难   1098 小众书籍 数据库 中等   1099 小于 K 的两数之和 数组 简单   1100 长度为 K 的无重复字符子串 字符串 中等   1101 彼此熟识的最早时间 并查集 中等   1102 得分最高的路径 深度优先搜索 , 并查集 , 图 中等   1103 分糖果 II 数学 简单   1104 二叉树寻路 树 , 数学 中等   1105 填充书架 动态规划 中等   1106 解析布尔表达式 字符串 困难   1107 每日新用户统计 数据库 中等   1108 IP 地址无效化 字符串 简单   1109 航班预订统计 数组 , 数学 中等   1110 删点成林 树 , 深度优先搜索 中等   1111 有效括号的嵌套深度 贪心算法 , 二分查找 中等   1112 每位学生的最高成绩 数据库 中等   1113 报告的记录 数据库 简单   1114 按序打印 多线程 简单   1115 交替打印 FooBar 多线程 中等   1116 打印零与奇偶数 多线程 中等   1117 H2O 生成 多线程 中等   1118 一月有多少天  简单   1119 删去字符串中的元音 字符串 简单   1120 子树的最大平均值 树 中等   1121 将数组分成几个递增序列 数学 困难   1122 数组的相对排序 排序 , 数组 简单   1123 最深叶节点的最近公共祖先 树 , 深度优先搜索 中等   1124 表现良好的最长时间段 栈 中等   1125 最小的必要团队 位运算 , 动态规划 困难   1126 查询活跃业务 数据库 中等   1127 用户购买平台 数据库 困难   1128 等价多米诺骨牌对的数量 数组 简单   1129 颜色交替的最短路径 广度优先搜索 , 图 中等   1130 叶值的最小代价生成树 栈 , 树 , 动态规划 中等   1131 绝对值表达式的最大值 位运算 , 数学 中等   1132 报告的记录 II 数据库 中等   1133 最大唯一数 数组 , 哈希表 简单   1134 阿姆斯特朗数 数学 简单   1135 最低成本联通所有城市 并查集 , 图 中等   1136 平行课程 深度优先搜索 , 图 , 动态规划 困难   1137 第 N 个泰波那契数 递归 简单   1138 字母板上的路径 哈希表 , 字符串 中等   1139 最大的以 1 为边界的正方形 动态规划 中等   1140 石子游戏 II 动态规划 中等   1141 查询近 30 天活跃用户数 数据库 简单   1142 过去 30 天的用户活动 II 数据库 简单   1143 最长公共子序列 动态规划 中等   1144 递减元素使数组呈锯齿状 数组 中等   1145 二叉树着色游戏 树 , 深度优先搜索 中等   1146 快照数组 数组 中等   1147 段式回文 动态规划 困难   1148 文章浏览 I 数据库 简单   1149 文章浏览 II 数据库 中等   1150 检查一个数是否在数组中占绝大多数 数组 , 二分查找 简单   1151 最少交换次数来组合所有的 1 数组 中等   1152 用户网站访问行为分析 排序 , 数组 , 哈希表 中等   1153 字符串转化 图 困难   1154 一年中的第几天 数学 简单   1155 掷骰子的 N 种方法 动态规划 中等   1156 单字符重复子串的最大长度 字符串 中等   1157 子数组中占绝大多数的元素 线段树 , 数组 , 二分查找 困难   1158 市场分析 I 数据库 中等   1159 市场分析 II 数据库 困难   1160 拼写单词 数组 , 哈希表 简单   1161 最大层内元素和 图 中等   1162 地图分析 广度优先搜索 , 图 中等   1163 按字典序排在最后的子串 字符串 困难   1164 指定日期的产品价格 数据库 中等   1165 单行键盘 字符串 简单   1166 设计文件系统 设计 , 哈希表 中等   1167 连接棒材的最低费用 贪心算法 中等   1168 水资源分配优化 并查集 , 图 困难   1169 查询无效交易 数组 , 字符串 中等   1170 比较字符串最小字母出现频次 数组 , 字符串 简单   1171 从链表中删去总和值为零的连续节点 链表 中等   1172 餐盘栈 设计 困难   1173 即时食物配送 I 数据库 简单   1174 即时食物配送 II 数据库 中等   1175 质数排列 数学 简单   1176 健身计划评估 数组 简单   1177 构建回文串检测 数组 , 字符串 中等   1178 猜字谜 位运算 , 哈希表 困难   1179 重新格式化部门表 数据库 简单   1180 统计只含单一字母的子串 数学 , 字符串 简单   1181 前后拼接 字符串 中等   1182 与目标颜色间的最短距离 二分查找 中等   1183 矩阵中 1 的最大数量 排序 , 数学 困难   1184 公交站间的距离 数组 简单   1185 一周中的第几天 数组 简单   1186 删除一次得到子数组最大和 动态规划 中等   1187 使数组严格递增 动态规划 困难   1188 设计有限阻塞队列 多线程 中等   1189 “气球” 的最大数量 哈希表 , 字符串 简单   1190 反转每对括号间的子串 栈 中等   1191 K 次串联后最大子数组之和 动态规划 中等   1192 查找集群内的「关键连接」 深度优先搜索 困难   1193 每月交易 I 数据库 中等   1194 锦标赛优胜者 数据库 困难   1195 交替打印字符串 多线程 中等   1196 最多可以买到的苹果数量 贪心算法 简单   1197 进击的骑士 广度优先搜索 中等   1198 找出所有行中最小公共元素 哈希表 , 二分查找 中等   1199 建造街区的最短时间 数学 , 动态规划 困难   1200 最小绝对差 数组 简单   1201 丑数 III 数学 , 二分查找 中等   1202 交换字符串中的元素 并查集 , 数组 中等   1203 项目管理 深度优先搜索 , 图 , 拓扑排序 困难   1204 最后一个能进入电梯的人 数据库 中等   1205 每月交易 II 数据库 中等   1206 设计跳表 设计 困难   1207 独一无二的出现次数 哈希表 简单   1208 尽可能使字符串相等 数组 中等   1209 删除字符串中的所有相邻重复项 II 栈 中等   1210 穿过迷宫的最少移动次数 广度优先搜索 困难   1211 查询结果的质量和占比 数据库 简单   1212 查询球队积分 数据库 中等   1213 三个有序数组的交集 哈希表 , 双指针 简单   1214 查找两棵二叉搜索树之和 二叉搜索树 中等   1215 步进数 回溯算法 中等   1216 验证回文字符串 III 字符串 , 动态规划 困难   1217 玩筹码 贪心算法 , 数组 , 数学 简单   1218 最长定差子序列 数学 , 动态规划 中等   1219 黄金矿工 回溯算法 中等   1220 统计元音字母序列的数目 动态规划 困难   1221 分割平衡字符串 贪心算法 , 字符串 简单   1222 可以攻击国王的皇后 数组 中等   1223 掷骰子模拟 动态规划 中等   1224 最大相等频率 哈希表 困难   1225 报告系统状态的连续日期 数据库 困难   1226 哲学家进餐 多线程 中等   1227 飞机座位分配概率 脑筋急转弯 , 数学 , 动态规划 中等   1228 等差数列中缺失的数字 数学 简单   1229 安排会议日程  中等   1230 抛掷硬币 数学 , 动态规划 中等   1231 分享巧克力 贪心算法 , 二分查找 困难   1232 缀点成线 几何 , 数组 , 数学 简单   1233 删除子文件夹 数组 , 字符串 中等   1234 替换子串得到平衡字符串 双指针 , 字符串 中等   1235 规划兼职工作 排序 , 二分查找 , 动态规划 困难   1236 网络爬虫 深度优先搜索 , 广度优先搜索 中等   1237 找出给定方程的正整数解 数学 , 二分查找 简单   1238 循环码排列 数学 中等   1239 串联字符串的最大长度 位运算 , 回溯算法 中等   1240 铺瓷砖 动态规划 , 回溯算法 困难   1241 每个帖子的评论数 数据库 简单   1242 多线程网页爬虫 深度优先搜索 , 广度优先搜索 , 多线程 中等   1243 数组变换 数组 简单   1244 力扣排行榜 排序 , 设计 , 哈希表 中等   1245 树的直径 树 , 深度优先搜索 , 广度优先搜索 中等   1246 删除回文子数组 动态规划 困难   1247 交换字符使得字符串相同 贪心算法 , 字符串 中等   1248 统计「优美子数组」 双指针 中等   1249 移除无效的括号 栈 , 字符串 中等   1250 检查「好数组」 数学 困难   1251 平均售价 数据库 简单   1252 奇数值单元格的数目 数组 简单   1253 重构 2 行二进制矩阵 贪心算法 , 数学 中等   1254 统计封闭岛屿的数目 深度优先搜索 中等   1255 得分最高的单词集合 位运算 困难   1256 加密数字 位运算 , 数学 中等   1257 最小公共区域 树 中等   1258 近义词句子 回溯算法 中等   1259 不相交的握手 数学 , 动态规划 困难   1260 二维网格迁移 数组 简单   1261 在受污染的二叉树中查找元素 树 , 哈希表 中等   1262 可被三整除的最大和 动态规划 中等   1263 推箱子 广度优先搜索 困难   1264 页面推荐 数据库 中等   1265 逆序打印不可变链表  中等   1266 访问所有点的最小时间 几何 , 数组 简单   1267 统计参与通信的服务器 图 , 数组 中等   1268 搜索推荐系统 字符串 中等   1269 停在原地的方案数 动态规划 困难   1270 向公司 CEO 汇报工作的所有人 数据库 中等   1271 十六进制魔术数字 数学 , 字符串 简单   1272 删除区间 数学 中等   1273 删除树节点 深度优先搜索 , 动态规划 中等   1274 矩形内船只的数目 分治算法 困难   1275 找出井字棋的获胜者 数组 简单   1276 不浪费原料的汉堡制作方案 贪心算法 , 数学 中等   1277 统计全为 1 的正方形子矩阵 数组 , 动态规划 中等   1278 分割回文串 III 动态规划 困难   1279 红绿灯路口 多线程 简单   1280 学生们参加各科测试的次数 数据库 简单   1281 整数的各位积和之差 数学 简单   1282 用户分组 贪心算法 中等   1283 使结果不超过阈值的最小除数 二分查找 中等   1284 转化为全零矩阵的最少反转次数 广度优先搜索 困难   1285 找到连续区间的开始和结束数字 数据库 中等   1286 字母组合迭代器 设计 , 回溯算法 中等   1287 有序数组中出现次数超过 25% 的元素 数组 简单   1288 删除被覆盖区间  中等   1289 下降路径最小和 II 动态规划 困难   1290 二进制链表转整数 位运算 , 链表 简单   1291 顺次数 回溯算法 中等   1292 元素和小于等于阈值的正方形的最大边长 数组 , 二分查找 中等   1293 网格中的最短路径 广度优先搜索 困难   1294 不同国家的天气类型 数据库 简单   1295 统计位数为偶数的数字 数组 简单   1296 划分数组为连续数字的集合 贪心算法 , 数组 中等   1297 子串的最大出现次数 位运算 , 字符串 中等   1298 你能从盒子里获得的最大糖果数 广度优先搜索 困难   1299 将每个元素替换为右侧最大元素 数组 简单   1300 转变数组后最接近目标值的数组和 数组 , 二分查找 中等   1301 最大得分的路径数目 动态规划 困难   1302 层数最深叶子节点的和 树 , 深度优先搜索 中等   1303 求团队人数 数据库 简单   1304 和为零的 N 个唯一整数 数组 简单   1305 两棵二叉搜索树中的所有元素 排序 , 树 中等   1306 跳跃游戏 III 广度优先搜索 , 图 中等   1307 口算难题 数学 , 回溯算法 困难   1308 不同性别每日分数总计 数据库 中等   1309 解码字母到整数映射 字符串 简单   1310 子数组异或查询 位运算 中等   1311 获取你好友已观看的视频 广度优先搜索 , 哈希表 , 字符串 中等   1312 让字符串成为回文串的最少插入次数 动态规划 困难   1313 解压缩编码列表 数组 简单   1314 矩阵区域和 动态规划 中等   1315 祖父节点值为偶数的节点和 树 , 深度优先搜索 中等   1316 不同的循环子字符串 字符串 困难   1317 将整数转换为两个无零整数的和 数学 简单   1318 或运算的最小翻转次数 位运算 中等   1319 连通网络的操作次数 深度优先搜索 , 广度优先搜索 , 并查集 中等   1320 二指输入的的最小距离 动态规划 困难   1321 餐馆营业额变化增长 数据库 中等   1322 广告效果 数据库 简单   1323 6 和 9 组成的最大数字 数学 简单   1324 竖直打印单词 字符串 中等   1325 删除给定值的叶子节点 树 中等   1326 灌溉花园的最少水龙头数目 贪心算法 , 动态规划 困难   1327 列出指定时间段内所有的下单产品 数据库 简单   1328 破坏回文串 字符串 中等   1329 将矩阵按对角线排序 排序 , 数组 中等   1330 翻转子数组得到最大的数组值 数组 , 数学 困难   1331 数组序号转换 数组 简单   1332 删除回文子序列 字符串 简单   1333 餐厅过滤器 排序 , 数组 中等   1334 阈值距离内邻居最少的城市 图 中等   1335 工作计划的最低难度 动态规划 困难   1336 每次访问的交易次数 数据库 困难   1337 方阵中战斗力最弱的 K 行 数组 , 二分查找 简单   1338 数组大小减半 贪心算法 , 数组 中等   1339 分裂二叉树的最大乘积 树 , 动态规划 中等   1340 跳跃游戏 V 动态规划 困难   1341 电影评分 数据库 中等   1342 将数字变成 0 的操作次数 位运算 简单   1343 大小为 K 且平均值大于等于阈值的子数组数目 数组 中等   1344 时钟指针的夹角 数学 中等   1345 跳跃游戏 IV 广度优先搜索 困难   1346 检查整数及其两倍数是否存在 数组 简单   1347 制造字母异位词的最小步骤数 字符串 中等   1348 推文计数 设计 中等   1349 参加考试的最大学生数 动态规划 困难   1350 院系无效的学生 数据库 简单   1351 统计有序矩阵中的负数 数组 , 二分查找 简单   1352 最后 K 个数的乘积 设计 , 数组 中等   1353 最多可以参加的会议数目 贪心算法 , 排序 , 线段树 中等   1354 多次求和构造目标数组 贪心算法 困难   1355 活动参与者 数据库 中等   1356 根据数字二进制下 1 的数目排序 排序 , 位运算 简单   1357 每隔 n 个顾客打折 设计 中等   1358 包含所有三种字符的子字符串数目 字符串 中等   1359 有效的快递序列数目 数学 , 动态规划 困难   1360 日期之间隔几天  简单   1361 验证二叉树 图 中等   1362 最接近的因数 数学 中等   1363 形成三的最大倍数 数学 , 动态规划 困难   1364 顾客的可信联系人数量 数据库 中等   1365 有多少小于当前数字的数字 数组 , 哈希表 简单   1366 通过投票对团队排名 排序 , 数组 中等   1367 二叉树中的列表 树 , 链表 , 动态规划 中等   1368 使网格图至少有一条有效路径的最小代价 广度优先搜索 困难   1369 获取最近第二次的活动 数据库 困难   1370 上升下降字符串 排序 , 字符串 简单   1371 每个元音包含偶数次的最长子字符串 字符串 中等   1372 二叉树中的最长交错路径 树 , 动态规划 中等   1373 二叉搜索子树的最大键值和 二叉搜索树 , 动态规划 困难   1374 生成每种字符都是奇数个的字符串 字符串 简单   1375 灯泡开关 III 数组 中等   1376 通知所有员工所需的时间 深度优先搜索 中等   1377 T 秒后青蛙的位置 深度优先搜索 困难   1378 使用唯一标识码替换员工 ID 数据库 简单   1379 找出克隆二叉树中的相同节点 树 中等   1380 矩阵中的幸运数 数组 简单   1381 设计一个支持增量操作的栈 栈 , 设计 中等   1382 将二叉搜索树变平衡 二叉搜索树 中等   1383 最大的团队表现值 贪心算法 , 排序 困难   1384 按年度列出销售总额 数据库 困难   1385 两个数组间的距离值 数组 简单   1386 安排电影院座位 贪心算法 , 数组 中等   1387 将整数按权重排序 排序 , 图 中等   1388 3n 块披萨 动态规划 困难   1389 按既定顺序创建目标数组 数组 简单   1390 四因数 数学 中等   1391 检查网格中是否存在有效路径 深度优先搜索 , 广度优先搜索 中等   1392 最长快乐前缀 字符串 困难   1393 Capital Gain/Loss 数据库 中等    "});index.add({'id':18,'href':'/study-algs/docs/advanced/raft/','title':"raft",'content':"raft 关注 baidu/braft  "});index.add({'id':19,'href':'/study-algs/docs/advanced/bloom-filter/','title':"布隆过滤器",'content':"布隆过滤器 布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。 它实际上是一个很长的二进制向量和一系列随机映射函数。 布隆过滤器可以用于检索一个元素是否在一个集合中。 它的优点是空间效率和查询时间都比一般的算法要好的多， 缺点是有一定的误识别率和删除困难。\n解决： 网页 URL 去重、垃圾邮件识别、大集合中重复元素的判断和缓存穿透等问题\n本质上布隆过滤器是一种数据结构，比较巧妙的概率型数据结构（probabilistic data structure），特点是高效地插入和查询，可以用来告诉你 某样东西一定不存在或者可能存在。\n相比于传统的 List、Set、Map 等数据结构，它更高效、占用空间更少，但是缺点是其返回的结果是概率性的，而不是确切的。\nHashMap 的问题   例如存储容量占比高，考虑到负载因子的存在，通常空间是不能被用满的，而一旦你的值很多例如上亿的时候，那 HashMap 占据的内存大小就变得很可观了。\n  还比如说你的数据集存储在远程服务器上，本地服务接受输入，而数据集非常大不可能一次性读进内存构建 HashMap 的时候，也会存在问题。\n  "});index.add({'id':20,'href':'/study-algs/docs/basic/sort/','title':"排序算法",'content':"排序算法 "});index.add({'id':21,'href':'/study-algs/docs/basic/introduction/','title':"概论",'content':"算法概论 "});index.add({'id':22,'href':'/study-algs/docs/basic/recursive/','title':"递归",'content':"递归 参考  三道题套路解决递归问题  "});index.add({'id':23,'href':'/study-algs/docs/practice/nowcoder/','title':"牛客网",'content':"牛客网 "});index.add({'id':24,'href':'/study-algs/docs/practice/leetcode/54/','title':"54. 螺旋矩阵",'content':"螺旋矩阵 题目 中文 给定一个包含 m x n 个元素的矩阵（m 行，n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。\n示例 1:\n输入: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] 输出: [1,2,3,6,9,8,7,4,5] 示例 2:\n输入: [ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12] ] 输出: [1,2,3,4,8,12,11,10,9,5,6,7] English Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.\nExample 1:\nInput: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] Output: [1,2,3,6,9,8,7,4,5] Example 2:\nInput: [ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12] ] Output: [1,2,3,4,8,12,11,10,9,5,6,7]   分析 基础 进阶 高阶   题解 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 class Solution: def spiralOrder(self, matrix: List[List[int]]) -\u0026gt; List[int]: if not matrix: return [] # 第一行，按顺序 result = matrix.pop(0) # 最右侧 for i, l in enumerate(matrix[:-1]): if l: result.append(matrix[i].pop()) # 最后一行 if matrix: result.extend(matrix.pop()[::-1]) # 最左侧 for i, l in enumerate(matrix[::-1]): if l: result.append(matrix[::-1][i].pop(0)) # 递归，合并结果 result.extend(self.spiralOrder(matrix)) return result Ruby Rust Scala Swift  "});index.add({'id':25,'href':'/study-algs/docs/practice/leetcode/110/','title':"110. 平衡二叉树",'content':"平衡二叉树 题目 中文 给定一个二叉树，判断它是否是高度平衡的二叉树。\n本题中，一棵高度平衡二叉树定义为：\n一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。\n示例 1:\n给定二叉树 [3,9,20,null,null,15,7] 3 / \\ 9 20 / \\ 15 7 返回 true 。\n示例 2:\n给定二叉树 [1,2,2,3,3,null,null,4,4] 1 / \\ 2 2 / \\ 3 3 / \\ 4 4 返回 false 。 English Given a binary tree, determine if it is height-balanced.\nFor this problem, a height-balanced binary tree is defined as:\na binary tree in which the left and right subtrees of every node differ in height by no more than 1.\nExample 1:\nGiven the following tree [3,9,20,null,null,15,7]: 3 / \\ 9 20 / \\ 15 7 Return true.\nExample 2:\nGiven the following tree [1,2,2,3,3,null,null,4,4]: 1 / \\ 2 2 / \\ 3 3 / \\ 4 4 Return false.   分析 基础 进阶 高阶   题解 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 class Solution: def isBalanced(self, root: TreeNode) -\u0026gt; bool: return self.height(root) \u0026gt;= 0 def height(self, root: TreeNode) -\u0026gt; int: if root is None: return 0 lh = self.height(root.left) rh = self.height(root.right) if lh \u0026gt;= 0 and rh \u0026gt;=0 and abs(lh - rh) \u0026lt;= 1: return max(lh, rh) + 1 return -1 Ruby Rust Scala Swift  "});index.add({'id':26,'href':'/study-algs/docs/practice/leetcode/146/','title':"146. LRU 缓存机制",'content':"LRU 缓存机制 题目 中文 运用你所掌握的数据结构，设计和实现一个 LRU (最近最少使用) 缓存机制。它应该支持以下操作： 获取数据 get 和 写入数据 put 。\n获取数据 get(key) - 如果密钥 (key) 存在于缓存中，则获取密钥的值（总是正数），否则返回 -1。 写入数据 put(key, value) - 如果密钥已经存在，则变更其数据值；如果密钥不存在，则插入该组「密钥 / 数据值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。\n进阶:\n你是否可以在 O(1) 时间复杂度内完成这两种操作？\n示例:\nLRUCache cache = new LRUCache( 2 /* 缓存容量 */ ); cache.put(1, 1); cache.put(2, 2); cache.get(1); // 返回 1 cache.put(3, 3); // 该操作会使得密钥 2 作废 cache.get(2); // 返回 -1 (未找到) cache.put(4, 4); // 该操作会使得密钥 1 作废 cache.get(1); // 返回 -1 (未找到) cache.get(3); // 返回 3 cache.get(4); // 返回 4 English Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.\nget(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1. put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.\nThe cache is initialized with a positive capacity.\nFollow up: Could you do both operations in O(1) time complexity?\nExample:\nLRUCache cache = new LRUCache( 2 /* capacity */ ); cache.put(1, 1); cache.put(2, 2); cache.get(1); // returns 1 cache.put(3, 3); // evicts key 2 cache.get(2); // returns -1 (not found) cache.put(4, 4); // evicts key 1 cache.get(1); // returns -1 (not found) cache.get(3); // returns 3 cache.get(4); // returns 4   分析 基础 进阶 高阶   题解 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 class DLinkedNode: def __init__(self): self.key = 0 self.val = 0 self.pre = None self.next = None class LRUCache: def _add(self, node: DLinkedNode): node.next = self.head.next node.pre = self.head self.head.next.pre = node self.head.next = node def _remove(self, node: DLinkedNode): if not node or not node.pre or not node.next: return node.pre.next = node.next node.next.pre = node.pre def _move_to_head(self, node: DLinkedNode): self._remove(node) self._add(node) def _pop_tail(self) -\u0026gt; DLinkedNode: if self.size == 0: return None node = self.tail.pre self._remove(node) return node def __init__(self, capacity: int): self.capacity = capacity self.size = 0 self.cache = {} self.head = DLinkedNode() self.tail = DLinkedNode() self.head.next = self.tail self.tail.pre = self.head def get(self, key: int) -\u0026gt; int: node = self.cache.get(key, None) if not node: return -1 self._move_to_head(node) return node.val def put(self, key: int, value: int) -\u0026gt; None: node = self.cache.get(key, None) if not node: node = DLinkedNode() node.key = key node.val = value self.cache[key] = node self.size = self.size + 1 self._add(node) if self.size \u0026gt; self.capacity: node = self._pop_tail() del(self.cache[node.key]) else: node.val = value self._move_to_head(node) Ruby Rust Scala Swift  "});index.add({'id':27,'href':'/study-algs/docs/practice/leetcode/671/','title':"671. 二叉树中第二小的节点",'content':"二叉树中第二小的节点 题目 中文 给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 2 或 0。如果一个节点有两个子节点的话，那么这个节点的值不大于它的子节点的值。\n给出这样的一个二叉树，你需要输出所有节点中的第二小的值。如果第二小的值不存在的话，输出 -1 。\n示例 1:\n输入: 2 / \\ 2 5 / \\ 5 7 输出: 5 说明: 最小的值是 2 ，第二小的值是 5 。 示例 2:\n输入: 2 / \\ 2 2 输出: -1 说明: 最小的值是 2, 但是不存在第二小的值。 English Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node\u0026rsquo;s value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.\nGiven such a binary tree, you need to output the second minimum value in the set made of all the nodes\u0026rsquo; value in the whole tree.\nIf no such second minimum value exists, output -1 instead.\nExample 1:\nInput: 2 / \\ 2 5 / \\ 5 7 Output: 5 Explanation: The smallest value is 2, the second smallest value is 5. Example 2:\nInput: 2 / \\ 2 2 Output: -1 Explanation: The smallest value is 2, but there isn't any second smallest value.   分析 基础 root 肯定是最小的。 那就维护一个大于 root 的最小值，遍历整棵树，如果这个值不存在，就返回 -1进阶 高阶   题解 C C\u0026#43;\u0026#43; C# Go Java JavaScript Kotlin PHP Python2 Python3 # Definition for a binary tree node. # class TreeNode: # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution: def findSecondMinimumValue(self, root: TreeNode) -\u0026gt; int: if root is None: return -1 secondMin = self.getSecodeMin(root, root.val, float(\u0026#39;inf\u0026#39;)) if secondMin == float(\u0026#39;inf\u0026#39;): return -1 else: return secondMin def getSecodeMin(self, node: TreeNode, rootVal: int, secondMin: int) -\u0026gt; int: if node is None: return secondMin if node.val != rootVal and node.val \u0026lt; secondMin: secondMin = node.val print(secondMin) return min(self.getSecodeMin(node.left, rootVal, secondMin), self.getSecodeMin(node.right, rootVal, secondMin)) Ruby Rust Scala Swift  "});index.add({'id':28,'href':'/study-algs/docs/','title':"Docs",'content':""});})();